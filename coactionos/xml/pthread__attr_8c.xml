<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="pthread__attr_8c" kind="file">
    <compoundname>pthread_attr.c</compoundname>
    <includes refid="config_8h" local="yes">config.h</includes>
    <includes local="no">sys/features.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sched.h</includes>
    <incdepgraph>
      <node id="2159">
        <label>stdlib.h</label>
      </node>
      <node id="2160">
        <label>errno.h</label>
      </node>
      <node id="2157">
        <label>sys/features.h</label>
      </node>
      <node id="2158">
        <label>pthread.h</label>
      </node>
      <node id="2161">
        <label>string.h</label>
      </node>
      <node id="2156">
        <label>config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="2155">
        <label>/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c</label>
        <link refid="pthread_attr.c"/>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2159" relation="include">
        </childnode>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2161" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
      </node>
      <node id="2162">
        <label>sched.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gad358947c13f0b19b18e35b7b32f6b89f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int check_initialized</definition>
        <argsstring>(const pthread_attr_t *attr)</argsstring>
        <name>check_initialized</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="25" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="333" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1ga391c34da42e68ddd24f5ee0c070d5c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getdetachstate</definition>
        <argsstring>(const pthread_attr_t *attr, int *detachstate)</argsstring>
        <name>pthread_attr_getdetachstate</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>detachstate</declname>
          <briefdescription><para>the destination for the detach state </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function gets the detach state from <emphasis>attr</emphasis> and stores it in <emphasis>detachstate</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="32" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="32" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gae6ee78c307d8467b34a9b0c330993a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setdetachstate</definition>
        <argsstring>(pthread_attr_t *attr, int detachstate)</argsstring>
        <name>pthread_attr_setdetachstate</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>detachstate</declname>
          <briefdescription><para>the new detach state (PTHREAD_CREATE_DETACHED or PTHREAD_CREATE_JOINABLE) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sets the detach state in <emphasis>attr</emphasis> with <emphasis>detachstate</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object</para></listitem><listitem><para>EINVAL: <emphasis>detachstate</emphasis> is not a valid </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="47" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="47" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gaa8b692ecc3880fdd49a4d423ba1ce91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getguardsize</definition>
        <argsstring>(const pthread_attr_t *attr, size_t *guardsize)</argsstring>
        <name>pthread_attr_getguardsize</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>size_t *</type>
          <declname>guardsize</declname>
          <briefdescription><para>the destination for the new guard size </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function gets the guard size from <emphasis>attr</emphasis> and stores it in <emphasis>guardsize</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="68" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1ga532b31c11a9d87663053c5342400758c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setguardsize</definition>
        <argsstring>(pthread_attr_t *attr, size_t guardsize)</argsstring>
        <name>pthread_attr_setguardsize</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>guardsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is not supported. The guard size is a fixed value that cannot be set by the user. <simplesect kind="return"><para>-1 with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to ENOTSUP </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="82" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1ga79a77b688c30213e5e52e6be178cde4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getinheritsched</definition>
        <argsstring>(const pthread_attr_t *attr, int *inheritsched)</argsstring>
        <name>pthread_attr_getinheritsched</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inheritsched</declname>
          <briefdescription><para>the destination for the inherit sched value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function gets the inherit sched value from <emphasis>attr</emphasis> and stores it in <emphasis>inheritsched</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="93" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="93" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gad437fe8caa3ef9f0cb7d69f6f6479df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setinheritsched</definition>
        <argsstring>(pthread_attr_t *attr, int inheritsched)</argsstring>
        <name>pthread_attr_setinheritsched</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>inheritsched</declname>
          <briefdescription><para>the new inherit sched value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sets the inherit sched in <emphasis>attr</emphasis> with <emphasis>inheritsched</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object</para></listitem><listitem><para>EINVAL: <emphasis>inheritsched</emphasis> is not a valid value </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="113" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="113" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gafd3d272d702481044f8a8cd253fd9b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getschedparam</definition>
        <argsstring>(const pthread_attr_t *attr, struct sched_param *param)</argsstring>
        <name>pthread_attr_getschedparam</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>struct sched_param *</type>
          <declname>param</declname>
          <briefdescription><para>the destination for the sched param value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function gets the scheduling parameters from <emphasis>attr</emphasis> and stores it in <emphasis>param</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="141" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="141" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1ga579e6529f0ce482312a5e77ac61cb4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setschedparam</definition>
        <argsstring>(pthread_attr_t *attr, const struct sched_param *param)</argsstring>
        <name>pthread_attr_setschedparam</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>const struct sched_param *</type>
          <declname>param</declname>
          <briefdescription><para>the source for the sched param value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sets the scheduling parameters in <emphasis>attr</emphasis> with <emphasis>param</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="155" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="155" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gaf032906f326f3c209c7eed6bb248ebee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getschedpolicy</definition>
        <argsstring>(const pthread_attr_t *attr, int *policy)</argsstring>
        <name>pthread_attr_getschedpolicy</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>policy</declname>
          <briefdescription><para>the destination for the schedule policy value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function gets the scheduling policy from <emphasis>attr</emphasis> and stores it in <emphasis>policy</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="184" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="184" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1ga79b4c9e71486a87ef3014f1c660b33eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setschedpolicy</definition>
        <argsstring>(pthread_attr_t *attr, int policy)</argsstring>
        <name>pthread_attr_setschedpolicy</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>policy</declname>
          <briefdescription><para>the new policy value (SCHED_FIFO, SCHED_RR, or SCHED_OTHER) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sets the scheduling policy in <emphasis>attr</emphasis> with <emphasis>policy</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object</para></listitem><listitem><para>EINVAL: <emphasis>policy</emphasis> does not refer to a valid policy. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="199" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="199" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gad3fe01698c4fad85bb5cc3f9a2e82ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getscope</definition>
        <argsstring>(const pthread_attr_t *attr, int *contentionscope)</argsstring>
        <name>pthread_attr_getscope</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>contentionscope</declname>
          <briefdescription><para>the destination for the contention scope value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function gets the contention scope from <emphasis>attr</emphasis> and stores it in <emphasis>contentionscope</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="223" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="223" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1ga6d8d320a882ba044a064975dddcf9ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setscope</definition>
        <argsstring>(pthread_attr_t *attr, int contentionscope)</argsstring>
        <name>pthread_attr_setscope</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>contentionscope</declname>
          <briefdescription><para>the new contention scope value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sets the contention scope in <emphasis>attr</emphasis> with <emphasis>contentionscope</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object</para></listitem><listitem><para>ENOTSUP: contentionscope is not PTHREAD_SCOPE_SYSTEM or PTHREAD_SCOPE_PROCESS </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="243" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="243" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gae23600d4670359ab12bfba20db2c9a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getstacksize</definition>
        <argsstring>(const pthread_attr_t *attr, size_t *stacksize)</argsstring>
        <name>pthread_attr_getstacksize</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>size_t *</type>
          <declname>stacksize</declname>
          <briefdescription><para>the destination for the new stack size </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This functions gets the stack size from <emphasis>attr</emphasis> and stores it in <emphasis>stacksize</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="270" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="270" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1ga812a9a455ae2ef2bb0dca4fff201a281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setstacksize</definition>
        <argsstring>(pthread_attr_t *attr, size_t stacksize)</argsstring>
        <name>pthread_attr_setstacksize</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>stacksize</declname>
          <briefdescription><para>the new stack size value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sets the stack size in <emphasis>attr</emphasis> with <emphasis>stacksize</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object</para></listitem><listitem><para>EINVAL: <emphasis>stacksize</emphasis> is too low of a value</para></listitem><listitem><para>ENOMEM: not enough memory </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="286" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="286" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1gadd78bd0e6395c9fbd8ed170a67da0b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_getstackaddr</definition>
        <argsstring>(const pthread_attr_t *attr, void **stackaddr)</argsstring>
        <name>pthread_attr_getstackaddr</name>
        <param>
          <type>const pthread_attr_t *</type>
          <declname>attr</declname>
          <briefdescription><para>a pointer to the attributes structure </para></briefdescription>
        </param>
        <param>
          <type>void **</type>
          <declname>stackaddr</declname>
          <briefdescription><para>the destination for the stack address </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This functions gets the stack address from <emphasis>attr</emphasis> and stores it in <emphasis>stackaddr</emphasis>. <simplesect kind="return"><para>Zero on success or -1 with errno set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>attr</emphasis> does not refer to an initialized thread attribute object </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="315" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="315" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="group___p_t_h_r_e_a_d___a_t_t_r_1ga298a51c79184546ef78800ea6d4463b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_attr_setstackaddr</definition>
        <argsstring>(pthread_attr_t *attr, void *stackaddr)</argsstring>
        <name>pthread_attr_setstackaddr</name>
        <param>
          <type>pthread_attr_t *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>stackaddr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is not supported. <simplesect kind="return"><para>-1 with errno equal to ENOTSUP </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" line="328" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c" bodystart="328" bodyend="331"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>2011;<sp/>All<sp/>Rights<sp/>Reserved</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Please<sp/>see<sp/>http://www.coactionos.com/license.html<sp/>for</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>licensing<sp/>information.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_8h" kindref="compound">config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/features.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sched.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_initialized(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*<sp/>attr);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1ga391c34da42e68ddd24f5ee0c070d5c4f" kindref="member">pthread_attr_getdetachstate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*<sp/>attr<sp/><sp/>,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>detachstate<sp/>){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*detachstate<sp/>=<sp/>PTHREAD_ATTR_GET_DETACH_STATE(attr);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1gae6ee78c307d8467b34a9b0c330993a54" kindref="member">pthread_attr_setdetachstate</ref>(pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detachstate<sp/>){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(detachstate<sp/>!=<sp/>PTHREAD_CREATE_DETACHED)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(detachstate<sp/>!=<sp/>PTHREAD_CREATE_JOINABLE)<sp/>){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>PTHREAD_ATTR_SET_DETACH_STATE(attr,<sp/>detachstate);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1gaa8b692ecc3880fdd49a4d423ba1ce91e" kindref="member">pthread_attr_getguardsize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*<sp/>attr<sp/>,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<sp/>guardsize<sp/>){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*guardsize<sp/>=<sp/>PTHREAD_ATTR_GET_GUARDSIZE(attr);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1ga532b31c11a9d87663053c5342400758c" kindref="member">pthread_attr_setguardsize</ref>(pthread_attr_t<sp/>*attr,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>guardsize){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOTSUP;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1ga79a77b688c30213e5e52e6be178cde4e" kindref="member">pthread_attr_getinheritsched</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*<sp/>attr<sp/>,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>inheritsched<sp/>){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_POSIX_THREAD_PRIORITY_SCHEDULING</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOSYS;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*inheritsched<sp/>=<sp/>PTHREAD_ATTR_GET_INHERIT_SCHED(attr);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1gad437fe8caa3ef9f0cb7d69f6f6479df9" kindref="member">pthread_attr_setinheritsched</ref>(pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inheritsched<sp/>){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_POSIX_THREAD_PRIORITY_SCHEDULING</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOSYS;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(inheritsched<sp/>==<sp/>PTHREAD_INHERIT_SCHED)<sp/>||</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(inheritsched<sp/>==<sp/>PTHREAD_EXPLICIT_SCHED)){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PTHREAD_ATTR_SET_INHERIT_SCHED(attr,<sp/>inheritsched);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1gafd3d272d702481044f8a8cd253fd9b47" kindref="member">pthread_attr_getschedparam</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sched_param<sp/>*param<sp/>){</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>memcpy(param,<sp/>&amp;(attr-&gt;schedparam),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sched_param));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1ga579e6529f0ce482312a5e77ac61cb4d5" kindref="member">pthread_attr_setschedparam</ref>(pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sched_param<sp/>*param<sp/>){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>policy;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>policy<sp/>=<sp/>PTHREAD_ATTR_GET_SCHED_POLICY(attr);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>param-&gt;sched_priority<sp/>&lt;<sp/><ref refid="group___s_c_h_e_d_1gaf1f370fc36ea6b22ed42b5ee3cf82a81" kindref="member">sched_get_priority_min</ref>(policy)<sp/>){</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>param-&gt;sched_priority<sp/>&gt;<sp/><ref refid="group___s_c_h_e_d_1gafaebd1698caeb9b9b9e614ad84edd609" kindref="member">sched_get_priority_max</ref>(policy)<sp/>){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(attr-&gt;schedparam),<sp/>param,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sched_param));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1gaf032906f326f3c209c7eed6bb248ebee" kindref="member">pthread_attr_getschedpolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*policy<sp/>){</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*policy<sp/>=<sp/>PTHREAD_ATTR_GET_SCHED_POLICY(attr);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1ga79b4c9e71486a87ef3014f1c660b33eb" kindref="member">pthread_attr_setschedpolicy</ref>(pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>policy<sp/>){</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(policy){</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SCHED_FIFO:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SCHED_RR:</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SCHED_OTHER:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PTHREAD_ATTR_SET_SCHED_POLICY(attr,<sp/>policy);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1gad3fe01698c4fad85bb5cc3f9a2e82ea3" kindref="member">pthread_attr_getscope</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*contentionscope<sp/>){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_POSIX_THREAD_PRIORITY_SCHEDULING</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOTSUP;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*contentionscope<sp/>=<sp/>PTHREAD_ATTR_GET_CONTENTION_SCOPE(attr);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1ga6d8d320a882ba044a064975dddcf9ced" kindref="member">pthread_attr_setscope</ref>(pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contentionscope<sp/>){</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_POSIX_THREAD_PRIORITY_SCHEDULING</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOSYS;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(contentionscope){</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PTHREAD_SCOPE_SYSTEM:</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PTHREAD_ATTR_SET_CONTENTION_SCOPE(attr,<sp/>contentionscope);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PTHREAD_SCOPE_PROCESS:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1gae23600d4670359ab12bfba20db2c9a37" kindref="member">pthread_attr_getstacksize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*stacksize<sp/>){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*stacksize<sp/>=<sp/>attr-&gt;stacksize;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1ga812a9a455ae2ef2bb0dca4fff201a281" kindref="member">pthread_attr_setstacksize</ref>(pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stacksize<sp/>){</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>guardsize;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stacksize<sp/>&gt;=<sp/>PTHREAD_STACK_MIN<sp/>){</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<sp/>attr-&gt;stackaddr<sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guardsize<sp/>=<sp/>PTHREAD_ATTR_GET_GUARDSIZE(attr);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr-&gt;stackaddr<sp/>=<sp/>malloc(stacksize<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>_reent)<sp/>+<sp/>guardsize);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>attr-&gt;stackaddr<sp/>==<sp/>NULL<sp/>){</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr-&gt;stacksize<sp/>=<sp/>stacksize;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1gadd78bd0e6395c9fbd8ed170a67da0b87" kindref="member">pthread_attr_getstackaddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*attr<sp/>,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**stackaddr<sp/>){</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>check_initialized(attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*stackaddr<sp/>=<sp/>attr-&gt;stackaddr;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___p_t_h_r_e_a_d___a_t_t_r_1ga298a51c79184546ef78800ea6d4463b9" kindref="member">pthread_attr_setstackaddr</ref>(pthread_attr_t<sp/>*attr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stackaddr){</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOTSUP;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_initialized(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pthread_attr_t<sp/>*<sp/>attr){</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>attr<sp/>==<sp/>NULL<sp/>){</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EINVAL;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>PTHREAD_ATTR_GET_IS_INITIALIZED(attr)<sp/>!=<sp/>1<sp/>){</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/pthread/pthread_attr.c"/>
  </compounddef>
</doxygen>
