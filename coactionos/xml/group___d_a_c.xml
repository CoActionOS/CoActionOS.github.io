<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group___d_a_c" kind="group">
    <compoundname>DAC</compoundname>
    <title>Digital to Analog Converter (DAC)</title>
    <innerfile refid="dac_8h">dac.h</innerfile>
    <innerclass refid="structdac__attr__t" prot="public">dac_attr_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___d_a_c_1gaf7a0f5287d897fc67ce9d9981c5b6236" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t dac_sample_t</definition>
        <argsstring></argsstring>
        <name>dac_sample_t</name>
        <briefdescription>
<para>This defines the type of variable used when writing the DAC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="87" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___d_a_c_1gaf5ae3462f69069538f8dcde23d7a1794" prot="public" static="no">
        <type><ref refid="structhwpl__action__t" kindref="compound">hwpl_action_t</ref></type>
        <definition>typedef hwpl_action_t dac_action_t</definition>
        <argsstring></argsstring>
        <name>dac_action_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="91" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___d_a_c_1gac3fc970e7fc2ec3b3af8f9ded724c5f4" prot="public" static="no">
        <name>DAC_IOC_IDENT_CHAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="71" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga41ef69195f41271a871d6b5935767b1d" prot="public" static="no">
        <name>DAC_MAX_VALUE</name>
        <briefdescription>
<para>This defines the maximum value that can be written to the DAC. It is MCU specific. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="79" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga22c9f2c629c76e0a7797088f0f1b9e76" prot="public" static="no">
        <name>DAC_SAMPLE_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="83" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga2aef61f2f1ea9a9375ec056d78d606a3" prot="public" static="no">
        <name>I_DAC_GETATTR</name>
        <briefdescription>
<para>See below for details. </para>        </briefdescription>
        <detaileddescription>
<para>This requests reads the DAC attributes.</para><para>Example: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="adc_8h" kindref="compound">dev/adc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structdac__attr__t" kindref="compound">dac_attr_t</ref><sp/>attr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">ioctl(fd,<sp/><ref refid="group___d_a_c_1ga2aef61f2f1ea9a9375ec056d78d606a3" kindref="member">I_DAC_GETATTR</ref>,<sp/>&amp;attr);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="116" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga7150dab3ac159845b2d8f9a1d511a43b" prot="public" static="no">
        <name>I_DAC_SETATTR</name>
        <briefdescription>
<para>See below for details. </para>        </briefdescription>
        <detaileddescription>
<para>This requests writes the DAC attributes.</para><para>Example: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="adc_8h" kindref="compound">dev/adc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structdac__attr__t" kindref="compound">dac_attr_t</ref><sp/>attr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">ioctl(fd,<sp/><ref refid="group___a_d_c_1gaf9007b82aa0f9af53bbb74796462927e" kindref="member">I_ADC_SETATTR</ref>,<sp/>&amp;attr);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="131" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gaef3a33b8a648832cf594492ba5a06565" prot="public" static="no">
        <name>I_DAC_SETACTION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="132" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga44e19f7aaf804aa4a92aae3f7f7abc09" prot="public" static="no">
        <name>I_DAC_GET</name>
        <briefdescription>
<para>See below for details. </para>        </briefdescription>
        <detaileddescription>
<para>This IOCTL arg value causes the ioctl call to return the current output value of the DAC.</para><para>Example: <programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline><highlight class="normal">value<sp/>=<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(dac_fd,<sp/><ref refid="group___d_a_c_1ga44e19f7aaf804aa4a92aae3f7f7abc09" kindref="member">I_DAC_GET</ref>);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="147" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga5395fa2a2b04f2f01eec504f34432b4a" prot="public" static="no">
        <name>I_DAC_TOTAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" line="149" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/dac.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The DAC peripheral driver allows access to the MCU&apos;s built-in DAC. More information about accessing peripheral IO is in the <ref refid="group___p_e_r_i_p_h_i_o" kindref="compound">Peripheral Input/Output</ref> section.</para><para>The following is an example of how to write the DAC in an OS environment:</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hwpl_8h" kindref="compound">hwpl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_dac(<ref refid="group___d_a_c_1gaf7a0f5287d897fc67ce9d9981c5b6236" kindref="member">dac_sample_t</ref><sp/>*<sp/>src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structdac__attr__t" kindref="compound">dac_attr_t</ref><sp/>ctl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fd<sp/>=<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gac843f2e35e60c3bbf1da47d84306f29b" kindref="member">open</ref>(</highlight><highlight class="stringliteral">&quot;/dev/dac0&quot;</highlight><highlight class="normal">,<sp/>O_RDWR);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fd<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>opening<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ctl.<ref refid="structdac__attr__t_1aa1feb38c44545f3af763f574c1318855" kindref="member">enabled_channels</ref><sp/>=<sp/>(1&lt;&lt;0);<sp/></highlight><highlight class="comment">//enable<sp/>channel<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctl.<ref refid="structdac__attr__t_1a173eac4045b35d199647b97ede9a604a" kindref="member">freq</ref><sp/>=<sp/>20000;<sp/></highlight><highlight class="comment">//20KHz<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctl.<ref refid="structdac__attr__t_1a02967e4e7ce70e05b0ee1845f8695ab6" kindref="member">pin_assign</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//Use<sp/>GPIO<sp/>configuration<sp/>zero<sp/>(see<sp/>device<sp/>specific<sp/>documentation<sp/>for<sp/>details)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(fd,<sp/>I_SETATTR,<sp/>&amp;ctl)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>peripheral<sp/>configuration<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>write<sp/>the<sp/>samples<sp/>of<sp/>the<sp/>DAC</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="group___u_n_i___f_i_l_d_e_s_1ga33a233f3e6cc9e1a2b8b3f6aaea2c808" kindref="member">lseek</ref>(fd,<sp/>0,<sp/>SEEK_SET);<sp/></highlight><highlight class="comment">//this<sp/>sets<sp/>the<sp/>channel<sp/>to<sp/>0,<sp/>&apos;c&apos;<sp/>device<sp/>does<sp/>not<sp/>auto-increment<sp/>on<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gadd30ddeed4bdbf3c96fa36970c1ca778" kindref="member">write</ref>(fd,<sp/>src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group___d_a_c_1gaf7a0f5287d897fc67ce9d9981c5b6236" kindref="member">dac_sample_t</ref>)*samples)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>writing<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaacad1d135ca2779b583623678e36db7c" kindref="member">close</ref>(fd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
