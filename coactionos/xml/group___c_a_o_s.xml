<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group___c_a_o_s" kind="group">
    <compoundname>CAOS</compoundname>
    <title>CoActionOS</title>
    <innerclass refid="structsignal__callback__t" prot="public">signal_callback_t</innerclass>
    <innergroup refid="group___s_t_d_c">C Standard Library</innergroup>
    <innergroup refid="group___p_o_s_i_x">POSIX</innergroup>
    <innergroup refid="group___l_i_n_k">USB Link</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___c_a_o_s_1gae65665332278b3b47ba519a1aba0222b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hibernate</definition>
        <argsstring>(int seconds)</argsstring>
        <name>hibernate</name>
        <param>
          <type>int</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function puts the controller in hibernate mode. All CPU and peripheral activity is stopped. The RTC continues running and will wake up the controller after <emphasis>seconds</emphasis> has elapsed. When the controller wakes up, it resumes execution in the same state as before <emphasis><ref refid="group___c_a_o_s_1gae65665332278b3b47ba519a1aba0222b" kindref="member">hibernate()</ref></emphasis> was called.</para><para>Hibernate corresponds to <emphasis>CORE_SLEEP_DEEPSLEEP</emphasis>. It can be woken up before <emphasis>seconds</emphasis> elapsed if other interrupts are enabled such as pin change interrupts. See the device specific documentation for wakeup events for <emphasis>CORE_SLEEP_DEEPSLEEP</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of seconds to hibernate (zero to hibernate indefinitely) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="436" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/time/hibernate.c" bodystart="74" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1gac149b46cea60ad2b3538a075d91ffacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void powerdown</definition>
        <argsstring>(int seconds)</argsstring>
        <name>powerdown</name>
        <param>
          <type>int</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function turns the controller off. The RTC stays on and wakes up the controller after <emphasis>seconds</emphasis> has elapsed. When the controller wakes up from power down, it resets.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of seconds to powerdown (zero to powedown indefinitely) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="446" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/time/hibernate.c" bodystart="94" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1gad20ba7632740ffd6129845b9028a0d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* initial_thread</definition>
        <argsstring>(void *arg) 1</argsstring>
        <name>initial_thread</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is weakly bound to code that initializes each filesystem and starts any processes that are designed to auto-run. It can be completely replaced so that users can customize the startup sequence. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1ga822cdf991a028966eb7656caefacae21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mkfs</definition>
        <argsstring>(const char *path)</argsstring>
        <name>mkfs</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format the filesystem that is mounted at <emphasis>path</emphasis>. <simplesect kind="return"><para>Zero on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1gae6a40de7b8a7cc12069ba2db872bd388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void htoa</definition>
        <argsstring>(char *dest, int num)</argsstring>
        <name>htoa</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1ga699d824ba0b882e9d60e8d00fd28b10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char htoc</definition>
        <argsstring>(int nibble)</argsstring>
        <name>htoc</name>
        <param>
          <type>int</type>
          <declname>nibble</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1ga4393cbea94379cda8f528b741b5d49c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int signal_callback</definition>
        <argsstring>(void *context, const void *data)</argsstring>
        <name>signal_callback</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function can be set as the callback for <ref refid="structhwpl__action__t" kindref="compound">hwpl_action_t</ref>. In this case, the context is pointing to a <ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref>. When the event happens, it will send a signal to the specified task.</para><para>If keep is non-zero, the signal will be sent each time the interrupt happens. Otherwise, the signal is just sent one time.</para><para>In the example below, the thread below will receive a SIGUSR1 the next time the external interrupt goes low. The run_on_sigusr1() will execute when the signal is received.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;applib/Eint.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run_on_sigusr1(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;got<sp/>sigusr1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Eint<sp/>intr(0);</highlight></codeline>
<codeline><highlight class="normal">intr.init();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group___s_i_g_n_a_l_1ga07e401f456a0156eba71562d79a76afa" kindref="member">signal</ref>(SIGUSR1,<sp/>(_sig_func_ptr)run_on_sigusr1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref><sp/>sig;<sp/></highlight><highlight class="comment">//this<sp/>must<sp/>be<sp/>valid<sp/>when<sp/>the<sp/>interrupt<sp/>happens</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">sig.tid<sp/>=<sp/><ref refid="group___p_t_h_r_e_a_d_1ga4c4f5f3b4f8f45d9d897847d53b11aaa" kindref="member">pthread_self</ref>();</highlight></codeline>
<codeline><highlight class="normal">sig.signo<sp/>=<sp/>SIGUSR1;</highlight></codeline>
<codeline><highlight class="normal">sig.keep<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">intr.setaction(0,<sp/><ref refid="group___e_i_n_t_1ggadd1257260f1ba401df43dd34fa2d28d5a91493ba0ea96049f046b9cfeebf42d81" kindref="member">EINT_ACTION_EVENT_FALLING</ref>,<sp/><ref refid="group___c_a_o_s_1ga4393cbea94379cda8f528b741b5d49c2" kindref="member">signal_callback</ref>,<sp/>&amp;sig);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="510" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="52" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___c_a_o_s_1ga1c6d5de492ac61ad29aec7aa9a436bbf" prot="public" static="no">
        <name>VERSION</name>
        <initializer>&quot;1.3.1&quot;</initializer>
        <briefdescription>
<para>Version. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/config.h" line="11" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/config.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_o_s_1ga73cb0db2d125d8006e0bc4349f532c73" prot="public" static="no">
        <name>BCDVERSION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/config.h" line="12" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/config.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>CoActionOS includes two main APIs for users: the <ref refid="group___s_t_d_c" kindref="compound">C Standard Library</ref> and the <ref refid="group___p_o_s_i_x" kindref="compound">POSIX</ref> API. </para>    </detaileddescription>
  </compounddef>
</doxygen>
