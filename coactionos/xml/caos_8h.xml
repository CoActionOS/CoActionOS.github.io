<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="caos_8h" kind="file">
    <compoundname>caos.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="hwpl_8h" local="yes">hwpl.h</includes>
    <includes refid="device_8h" local="yes">device.h</includes>
    <includedby refid="pthread__kill_8c" local="yes">/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c</includedby>
    <incdepgraph>
      <node id="1380">
        <label>sys/stat.h</label>
      </node>
      <node id="1375">
        <label>stdbool.h</label>
      </node>
      <node id="1382">
        <label>ioctl.h</label>
        <link refid="ioctl_8h_source"/>
      </node>
      <node id="1374">
        <label>stdint.h</label>
      </node>
      <node id="1371">
        <label>stdlib.h</label>
      </node>
      <node id="1373">
        <label>hwpl.h</label>
        <link refid="hwpl_8h"/>
        <childnode refid="1374" relation="include">
        </childnode>
        <childnode refid="1371" relation="include">
        </childnode>
        <childnode refid="1370" relation="include">
        </childnode>
        <childnode refid="1369" relation="include">
        </childnode>
        <childnode refid="1375" relation="include">
        </childnode>
        <childnode refid="1376" relation="include">
        </childnode>
        <childnode refid="1377" relation="include">
        </childnode>
        <childnode refid="1378" relation="include">
        </childnode>
      </node>
      <node id="1377">
        <label>hwpl/arch.h</label>
      </node>
      <node id="1370">
        <label>string.h</label>
      </node>
      <node id="1372">
        <label>time.h</label>
      </node>
      <node id="1379">
        <label>device.h</label>
        <link refid="device_8h_source"/>
        <childnode refid="1380" relation="include">
        </childnode>
        <childnode refid="1375" relation="include">
        </childnode>
        <childnode refid="1378" relation="include">
        </childnode>
        <childnode refid="1377" relation="include">
        </childnode>
        <childnode refid="1381" relation="include">
        </childnode>
      </node>
      <node id="1378">
        <label>hwpl/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="1374" relation="include">
        </childnode>
        <childnode refid="1375" relation="include">
        </childnode>
      </node>
      <node id="1376">
        <label>hwpl/fault.h</label>
      </node>
      <node id="1381">
        <label>dev/pio.h</label>
        <link refid="pio_8h"/>
        <childnode refid="1375" relation="include">
        </childnode>
        <childnode refid="1374" relation="include">
        </childnode>
        <childnode refid="1382" relation="include">
        </childnode>
        <childnode refid="1377" relation="include">
        </childnode>
      </node>
      <node id="1368">
        <label>/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h</label>
        <link refid="caos.h"/>
        <childnode refid="1369" relation="include">
        </childnode>
        <childnode refid="1370" relation="include">
        </childnode>
        <childnode refid="1371" relation="include">
        </childnode>
        <childnode refid="1372" relation="include">
        </childnode>
        <childnode refid="1373" relation="include">
        </childnode>
        <childnode refid="1379" relation="include">
        </childnode>
      </node>
      <node id="1369">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1384">
        <label>/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c</label>
        <link refid="pthread__kill_8c"/>
      </node>
      <node id="1383">
        <label>/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h</label>
        <link refid="caos.h"/>
        <childnode refid="1384" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structsignal__callback__t" prot="public">signal_callback_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___c_a_o_s_1gae65665332278b3b47ba519a1aba0222b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hibernate</definition>
        <argsstring>(int seconds)</argsstring>
        <name>hibernate</name>
        <param>
          <type>int</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function puts the controller in hibernate mode. All CPU and peripheral activity is stopped. The RTC continues running and will wake up the controller after <emphasis>seconds</emphasis> has elapsed. When the controller wakes up, it resumes execution in the same state as before <emphasis><ref refid="group___c_a_o_s_1gae65665332278b3b47ba519a1aba0222b" kindref="member">hibernate()</ref></emphasis> was called.</para><para>Hibernate corresponds to <emphasis>CORE_SLEEP_DEEPSLEEP</emphasis>. It can be woken up before <emphasis>seconds</emphasis> elapsed if other interrupts are enabled such as pin change interrupts. See the device specific documentation for wakeup events for <emphasis>CORE_SLEEP_DEEPSLEEP</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of seconds to hibernate (zero to hibernate indefinitely) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="436" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/time/hibernate.c" bodystart="74" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1gac149b46cea60ad2b3538a075d91ffacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void powerdown</definition>
        <argsstring>(int seconds)</argsstring>
        <name>powerdown</name>
        <param>
          <type>int</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function turns the controller off. The RTC stays on and wakes up the controller after <emphasis>seconds</emphasis> has elapsed. When the controller wakes up from power down, it resets.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of seconds to powerdown (zero to powedown indefinitely) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="446" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/time/hibernate.c" bodystart="94" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1gad20ba7632740ffd6129845b9028a0d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* initial_thread</definition>
        <argsstring>(void *arg) 1</argsstring>
        <name>initial_thread</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is weakly bound to code that initializes each filesystem and starts any processes that are designed to auto-run. It can be completely replaced so that users can customize the startup sequence. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1ga822cdf991a028966eb7656caefacae21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mkfs</definition>
        <argsstring>(const char *path)</argsstring>
        <name>mkfs</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format the filesystem that is mounted at <emphasis>path</emphasis>. <simplesect kind="return"><para>Zero on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1gae6a40de7b8a7cc12069ba2db872bd388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void htoa</definition>
        <argsstring>(char *dest, int num)</argsstring>
        <name>htoa</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1ga699d824ba0b882e9d60e8d00fd28b10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char htoc</definition>
        <argsstring>(int nibble)</argsstring>
        <name>htoc</name>
        <param>
          <type>int</type>
          <declname>nibble</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_o_s_1ga4393cbea94379cda8f528b741b5d49c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int signal_callback</definition>
        <argsstring>(void *context, const void *data)</argsstring>
        <name>signal_callback</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function can be set as the callback for <ref refid="structhwpl__action__t" kindref="compound">hwpl_action_t</ref>. In this case, the context is pointing to a <ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref>. When the event happens, it will send a signal to the specified task.</para><para>If keep is non-zero, the signal will be sent each time the interrupt happens. Otherwise, the signal is just sent one time.</para><para>In the example below, the thread below will receive a SIGUSR1 the next time the external interrupt goes low. The run_on_sigusr1() will execute when the signal is received.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;applib/Eint.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run_on_sigusr1(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;got<sp/>sigusr1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Eint<sp/>intr(0);</highlight></codeline>
<codeline><highlight class="normal">intr.init();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group___s_i_g_n_a_l_1ga07e401f456a0156eba71562d79a76afa" kindref="member">signal</ref>(SIGUSR1,<sp/>(_sig_func_ptr)run_on_sigusr1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref><sp/>sig;<sp/></highlight><highlight class="comment">//this<sp/>must<sp/>be<sp/>valid<sp/>when<sp/>the<sp/>interrupt<sp/>happens</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">sig.tid<sp/>=<sp/><ref refid="group___p_t_h_r_e_a_d_1ga4c4f5f3b4f8f45d9d897847d53b11aaa" kindref="member">pthread_self</ref>();</highlight></codeline>
<codeline><highlight class="normal">sig.signo<sp/>=<sp/>SIGUSR1;</highlight></codeline>
<codeline><highlight class="normal">sig.keep<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">intr.setaction(0,<sp/><ref refid="group___e_i_n_t_1ggadd1257260f1ba401df43dd34fa2d28d5a91493ba0ea96049f046b9cfeebf42d81" kindref="member">EINT_ACTION_EVENT_FALLING</ref>,<sp/><ref refid="group___c_a_o_s_1ga4393cbea94379cda8f528b741b5d49c2" kindref="member">signal_callback</ref>,<sp/>&amp;sig);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h" line="510" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="52" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>2011;<sp/>All<sp/>Rights<sp/>Reserved</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Please<sp/>see<sp/>http://www.coactionos.com/license.html<sp/>for</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>licensing<sp/>information.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor">#ifndef<sp/>CAOS_H_</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CAOS_H_</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//Standard<sp/>libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hwpl_8h" kindref="compound">hwpl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;device.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="436"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___c_a_o_s_1gae65665332278b3b47ba519a1aba0222b" kindref="member">hibernate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seconds);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_o_s_1gac149b46cea60ad2b3538a075d91ffacb" kindref="member">powerdown</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seconds);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group___c_a_o_s_1gad20ba7632740ffd6129845b9028a0d6b" kindref="member">initial_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>arg)<sp/>HWPL_WEAK;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___c_a_o_s_1ga822cdf991a028966eb7656caefacae21" kindref="member">mkfs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>path);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>htoa(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>dest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>htoc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nibble);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="structsignal__callback__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_signo;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_sigcode;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig_value;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keep;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}<sp/><ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___c_a_o_s_1ga4393cbea94379cda8f528b741b5d49c2" kindref="member">signal_callback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/><sp/>CAOS_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/caos.h"/>
  </compounddef>
</doxygen>
