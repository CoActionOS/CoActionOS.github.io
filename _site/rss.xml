<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>CoActionOS</title>
        <description>CoActionOS - CoActionOS, Inc</description>
        <link>http://Coactionos.github.io</link>
        <link>http://Coactionos.github.io</link>
        <lastBuildDate>2013-12-26T20:20:14-07:00</lastBuildDate>
        <pubDate>2013-12-26T20:20:14-07:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Get the Software</title>
                <description>&lt;p&gt;There are two software packages used with CoActionOS for Windows, Mac, and Linux&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CoActionOS Compiler (used for building programs)&lt;/li&gt;

&lt;li&gt;CoActionOS Link (used for installing and running programs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also recommend downloading &lt;a href=&quot;http://www.eclipse.org/downloads/&quot;&gt;Eclipse IDE for C/C++ Developers&lt;/a&gt; to use for editing code and invoking the compiler.&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/win/CoActionOS-Compiler-Installer-4.7.3-1.3.1.exe&quot;&gt;CoActionOS Compiler Installer GCC 4.7.3 CoActionOS 1.3.1&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/win/CoActionOS-Link-Installer-1.3.1.exe&quot;&gt;CoActionOS Link 1.3.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please be sure to read the Installing Windows Device Drivers.&lt;/p&gt;

&lt;h2 id=&quot;mac_os_x&quot;&gt;Mac OS X&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/macosx/CoActionOS-Compiler-4.7.3-1.3.1.pkg&quot;&gt;CoActionOS Compiler Installer GCC 4.7.3, CoActionOS 1.3.1&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/macosx/CoActionOS-Link-1.3.1.dmg&quot;&gt;CoActionOS Link 1.3.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubuntu_linux&quot;&gt;Ubuntu Linux&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/33863234/CoActionOS/linux/CoActionOS-Compiler-4.7.3-1.2.7.tar.gz&quot;&gt;CoActionOS Compiler Installer GCC 4.7.3, CoActionOS 1.2.7&lt;/a&gt; (&lt;a href=&quot;https://www.coactionos.com/redmine/boards/3/topics/5&quot;&gt;more info&lt;/a&gt;)&lt;/li&gt;

&lt;li&gt;Even though the Linux distribution is not as up to date, you can always download the code and build/install from &lt;a href=&quot;https://github.com/CoActionOS/CoActionOS&quot;&gt;source&lt;/a&gt; using Eclipse.&lt;/li&gt;

&lt;li&gt;CoActionOS Link: currently only available in &lt;a href=&quot;https://github.com/CoActionOS/CoActionOS-Desktop&quot;&gt;source form&lt;/a&gt;. You need to install Qt 5.0.2 in order to build the binary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install the compiler using the following commands. This assumes the tar file is downloaded to the ~/Downloads directory.&lt;/p&gt;
&lt;pre&gt;
cd /
sudo tar -xvf ~/Downloads/CoActionOS-Compiler-4.7.3-1.2.7.tar.gz
&lt;/pre&gt;</description>
                <link>http://Coactionos.github.io/getting-started/2013/12/24/Get-the-Software</link>
                <guid>http://Coactionos.github.io/getting-started/2013/12/24/Get-the-Software</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Installing Windows Device Drivers</title>
                <description>&lt;h2 id=&quot;windows_xpvista7&quot;&gt;Windows XP/Vista/7&lt;/h2&gt;

&lt;p&gt;p. When CoActionOS Link is installed, it copies the driver files to C:\Windows\inf (or whatever your Windows directory is). When a CoActionOS device is connected, Windows 7 automatically installs the driver.&lt;/p&gt;

&lt;h2 id=&quot;windows_81&quot;&gt;Windows 8.1&lt;/h2&gt;

&lt;p&gt;When CoActionOS Link is installed, it copes the driver files to C:\Windows\inf.&lt;br /&gt;However, Windows 8 is not able to automatically install the drivers. To install the drivers follow the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;After installing CoActionOS Link, connect the CoActionOS powered device&lt;/li&gt;

&lt;li&gt;Move CoActionOS-cdc-acm.inf and coactionos-cdc-acm.cat from C:\Windows\inf to the Desktop (or another easily accessible location)&lt;/li&gt;

&lt;li&gt;Start the device manager&lt;/li&gt;

&lt;li&gt;You should see “CoActionOS” under other; right click on it and select “Update Driver Software”&lt;/li&gt;

&lt;li&gt;Select the option to specify a location for the driver&lt;/li&gt;

&lt;li&gt;Specify to installed from the Desktop (e.g., C:\Users\you\Desktop)&lt;/li&gt;

&lt;li&gt;Windows 8 should successfully install the driver&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These steps only need to be taken the first time a device is connected. Subsequently, other CoActionOS devices should be automatically loaded by Windows 8.1.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Installing-Windows-Device-Drivers</link>
                <guid>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Installing-Windows-Device-Drivers</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Getting Started</title>
                <description>&lt;h3 id=&quot;buy_hardware&quot;&gt;Buy Hardware&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;“Buy the CoAction Hero”:http://www.coactionos.com/opencart/index.php?route=product/product&amp;amp;product_id=58 (easiest way to get started)&lt;/li&gt;

&lt;li&gt;“Install CoActionOS on mbed”:/redmine/projects/mbed-lpc1768&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install_eclipse_ide&quot;&gt;Install Eclipse IDE&lt;/h3&gt;

&lt;p&gt;The Eclipse IDE is used for editing and building CoActionOS applications. You can download the “Eclipse IDE”:http://www.eclipse.org/cdt/downloads.php for free.&lt;/p&gt;

&lt;h3 id=&quot;install_the_sdk&quot;&gt;Install the SDK&lt;/h3&gt;

&lt;p&gt;To build and install applications on CoActionOS, you will need to [[Get the Software|download and install the compiler and CoActionOS Link]]&lt;/p&gt;

&lt;h3 id=&quot;build_and_install_your_first_application&quot;&gt;Build and Install Your First Application&lt;/h3&gt;

&lt;p&gt;Read the [[CoActionOS Tutorial–First Project|first project tutorial]].&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Getting-Started</link>
                <guid>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Getting-Started</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Device Driver Development</title>
                <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Device drivers are code that is included in the kernel and used to access hardware. They are integrated with the filesystem and populate the /dev folder. The user application accesses drivers the same way as files.&lt;/p&gt;

&lt;h4 id=&quot;why_write_a_device_driver&quot;&gt;Why write a device driver?&lt;/h4&gt;

&lt;p&gt;It is not necessary to write a new device driver to access external circuitry. CoActionOS includes devices drivers for the on-chip MCU peripherals such as the UART, SPI, PIO, etc. These drivers can be used in most cases to access external chips. However, device drivers provide much better real-time performance than application code.&lt;/p&gt;

&lt;p&gt;This code is an example of how to access a SPI device in user code (without a custom device driver):&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Pin.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Spi.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;...&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;Pin&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//The chip select pin on P1.0&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;Spi&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//Use SPI port 0&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//Initialization&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PIO_MODE_OUTPUT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this calls open(&amp;quot;/dev/pio1&amp;quot;, O_RDWR) and ioctl() with I_PIO_SETATTR&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;4000000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this calls open(&amp;quot;/dev/spi0&amp;quot;, O_RDWR) and ioctl() with I_SPI_SETATTR&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//SPI read operation&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//drive CS low&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;read&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//drive CS high&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//Cleanup&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, the application code uses the /dev/pio and /dev/spi devices (using Applib) to access a SPI device. We can access the same device in a single read by writing a device driver for the SPI device. The driver will manage both the chip select pin and the SPI bus. The application code will then look like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Periph.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;fd&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//the fd to provide to Applib&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;bool&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initialized&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//another variable required for custom applib peripherals&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;

&lt;span class=&#39;n&#39;&gt;Periph&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;my_periph&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;fd&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initialzed&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;my_periph&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;open&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;/dev/my_spi&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;Periph&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;RDWR&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//The driver for /dev/my_spi can be configured to drive CS low, &lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//perform a SPI bus operation, then drive CS high all with the read() call&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;my_periph&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;read&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;

&lt;span class=&#39;n&#39;&gt;my_periph&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;spi_driver_example&quot;&gt;SPI Driver Example&lt;/h3&gt;

&lt;p&gt;Drivers are built with the kernel by populating a device_t.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;name&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NAME_MAX&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The name of the device */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;uid&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The user ID of the device */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;gid&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The group ID of the device */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;uint16_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mode&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The file access values */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;device_driver_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;driver&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The driver functions */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;device_cfg_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;cfg&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The configuration for the device */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;device_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;name&lt;/em&gt; shows up in the /dev folder. For example, if the &lt;em&gt;name&lt;/em&gt; is adc3, the file /dev/adc3 will exist.&lt;/li&gt;

&lt;li&gt;&lt;em&gt;uid&lt;/em&gt; and &lt;em&gt;gid&lt;/em&gt; are the user and group ID’s. CoActionOS currently has a single user system so these items have no meaning.&lt;/li&gt;

&lt;li&gt;&lt;em&gt;mode&lt;/em&gt; is the unix access permissions. Most devices are 0666&lt;/li&gt;

&lt;li&gt;&lt;em&gt;driver&lt;/em&gt; points to the functions that will be called when the user accesses the device&lt;/li&gt;

&lt;li&gt;&lt;em&gt;cfg&lt;/em&gt; points to a structure that allows the board support package to reconfigured what hardware is used for the port.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;device&lt;/em&gt;driver_t_ is shown below:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;HWPL_PACK&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;device_driver_open_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;open&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief A pointer to the periph_open() function */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;device_driver_ioctl_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;ioctl&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief A pointer to the periph_ioctl() function */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;device_driver_read_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;read&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief A pointer to the periph_read() function */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;device_driver_write_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;write&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief A pointer to the periph_write() function */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;device_driver_close_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;close&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief A pointer to the periph_close() function */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;device_driver_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;device&lt;/em&gt;driver_t_ structure defines five function pointers that will be called when the user calls open(), read(), write(), ioctl(), or close().&lt;/p&gt;

&lt;p&gt;Finally, the &lt;em&gt;device&lt;/em&gt;cfg_t_ allows the board support package to configure what hardware is used to access the device. For example, one board might use SPI port 1 with P1.0 as the chip select to access an external SPI device. Another board may use SPI port 0 with P2.8 as the chip select. The &lt;em&gt;device&lt;/em&gt;cfg_t_ data structure allows both boards to use the exact same device driver. It is not even necessary to recompile the driver-just to re-link with it. This approach allows device driver developers to release hardware configurable drivers with or without releasing the source code.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;HWPL_PACK&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;device_periph_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;periph&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief This is the configuration used for all peripherals */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin_assign&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The GPIO pin configuration */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bitrate&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief Specifies the max bit rate in bps */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;union&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
		&lt;span class=&#39;kt&#39;&gt;device_spi_cfg_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The configuration for devices that are connected via SPI bus */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
		&lt;span class=&#39;kt&#39;&gt;device_pwm_cfg_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The configuration for devices connected via PWM */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
		&lt;span class=&#39;kt&#39;&gt;device_adc_cfg_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;adc&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The configuration for devices connected to ADC pins */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
		&lt;span class=&#39;kt&#39;&gt;device_uart_cfg_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;uart&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The configuration for devices connected to UART pins */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
		&lt;span class=&#39;kt&#39;&gt;device_i2c_cfg_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i2c&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief The configuration for devices connected via I2C bus */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
		&lt;span class=&#39;kt&#39;&gt;pio_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pio&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief Used for generic GPIO devices such as LEDs */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pcfg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;const&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dcfg&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief Pointer to device specific configuration */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;state&lt;/span&gt; &lt;span class=&#39;cm&#39;&gt;/*! \brief Pointer to device specific state (RAM) */&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;device_cfg_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;periph&lt;/em&gt; contains data describes the MCU peripheral; current this is a single value that specifies the port number&lt;/li&gt;

&lt;li&gt;&lt;em&gt;pin&lt;/em&gt;assign_ specifies how to map the peripheral to the hardware pins. As an example, see “the pin assignments for the lpc17xx”:/redmine/projects/coactionos/embedded/group___l_p_c17_x_x_d_e_v.html.&lt;/li&gt;

&lt;li&gt;&lt;em&gt;bitrate&lt;/em&gt; specifies the maximum bitrate&lt;/li&gt;

&lt;li&gt;&lt;em&gt;pcfg&lt;/em&gt; contains data that is useful for most serial drivers. For example, the &lt;em&gt;device&lt;/em&gt;spi_cfg_t_ data allows the driver to specify the port/pin combination for the chip select line.&lt;/li&gt;

&lt;li&gt;&lt;em&gt;dcfg&lt;/em&gt; allows the driver developer to provide any additional constant data that is needed.&lt;/li&gt;

&lt;li&gt;&lt;em&gt;state&lt;/em&gt; allows the driver developer to provide any additional volatile data&lt;/li&gt;
&lt;/ul&gt;</description>
                <link>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Device-Driver-Development</link>
                <guid>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Device-Driver-Development</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Designing Applications using State Machines</title>
                <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A state machine is a model that helps when designing computer programs. The state machine is represented by a state diagram that shows 1) what states the program can have, 2) how the program transitions between states, and 3) what actions the programs takes while entering, exiting, or executing a state. A simple example of a state machine is a turnstile. The following diagram (from wikipedia) shows how the state machine works.&lt;/p&gt;

&lt;p&gt;turnstile.png&lt;/p&gt;

&lt;p&gt;The diagram shows at startup, the turnstile is locked. When a coin is inserted, the turnstile transitions to unlocked until someone walks through.&lt;/p&gt;

&lt;h2 id=&quot;a_coactionos_example&quot;&gt;A CoActionOS Example&lt;/h2&gt;

&lt;h3 id=&quot;smach_and_state&quot;&gt;SMach and State&lt;/h3&gt;

&lt;p&gt;CoActionOS Applib provides a C++ class for defining and executing state machines. For this example, we will use an alarm application. The program will start in the “home” state. When the user pushes start, the program will enter the “timer” state. From the “timer” state the user can push the reset button to return “home” or after 10 seconds, the state machine will transition to the “alarm” state.&lt;/p&gt;

&lt;p&gt;states.png&lt;/p&gt;

&lt;p&gt;To implement the state machine, we use two Applib classes “SMach”:/coactionos-applib/html/class_s_mach.html as the top level state machine and “State”:/coactionos-applib/html/class_state.html for each individual state. Each state is implemented as it’s own class which inherits “State”:/coactionos-applib/html/class_state.html and re-implements:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;k&#39;&gt;const&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;name&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//unique state name&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;bool&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;entry_action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//action to execute when entering the state&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;bool&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//action to execute while state is active&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;State&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;exit_condition&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;State&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;slist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//Executing to see if state should transition&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The methods above fit in to the state diagram above as noted below.&lt;/p&gt;

&lt;p&gt;states-info.png&lt;/p&gt;

&lt;h3 id=&quot;home_state&quot;&gt;Home State&lt;/h3&gt;

&lt;p&gt;This means the “home” state class looks like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/State.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Pin.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#39;k&#39;&gt;class&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;HomeState&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;public&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;State&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
&lt;span class=&#39;nl&#39;&gt;public:&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;HomeState&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;State&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{};&lt;/span&gt;

	&lt;span class=&#39;c1&#39;&gt;//The name of the state&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;const&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;name&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(){&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

	&lt;span class=&#39;c1&#39;&gt;//The state machine executes this function when the state is entered&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;bool&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;entry_action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

	&lt;span class=&#39;c1&#39;&gt;//The state executes this function while the state is active&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;bool&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

	&lt;span class=&#39;c1&#39;&gt;//The state executes this function while the state is active&lt;/span&gt;
	&lt;span class=&#39;c1&#39;&gt;//If this function returns a State other than 0 -- the state machine will transition to the new state&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;State&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;exit_condition&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;State&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;slist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
		&lt;span class=&#39;n&#39;&gt;State&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;next&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
		&lt;span class=&#39;n&#39;&gt;Pin&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;start&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assume state button is on P1.0&lt;/span&gt;
		&lt;span class=&#39;n&#39;&gt;start&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;Pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;INPUT&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;|&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;Pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PULLDOWN&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this only NEEDS to be called once at system startup&lt;/span&gt;
		&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;start&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
			&lt;span class=&#39;n&#39;&gt;next&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;find&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;slist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;timer&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
		&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
		&lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;next&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The “timer” and “alarm” states are similarly defined. The “timer” state’s name() method must return “timer” in order to the home state to find the state in the list. Next we will look at how the state machine is executed using SMach.&lt;/p&gt;

&lt;h3 id=&quot;state_machine_execution&quot;&gt;State Machine Execution&lt;/h3&gt;

&lt;p&gt;The state machine is a special type of state that contains a list of states that define the machine. It is declared quite similarly to a State.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/SMach.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;class&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;Machine&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;public&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;SMach&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
&lt;span class=&#39;nl&#39;&gt;public:&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;Machine&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;run&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;bool&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The run() method will be used to execute the state machine. The action() method is optional. It allows the state machine to execute some action whenever any state within the machine is active. For example, if you want to delay 10ms between executing state actions for all states, it can be done using the action() method as in the example below.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Timer.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;quot;Machine.hpp&amp;quot;&lt;/span&gt;

&lt;span class=&#39;cp&#39;&gt;#include &amp;quot;HomeState.hpp&amp;quot;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;quot;AlarmState.hpp&amp;quot;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;quot;TimerState.hpp&amp;quot;&lt;/span&gt;

&lt;span class=&#39;k&#39;&gt;static&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;HomeState&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;home&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;static&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;AlarmState&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alarm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;static&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;TimerState&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;timer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;

&lt;span class=&#39;c1&#39;&gt;//This is the state list -- it defines the states within the state machine&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;State&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;states&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
		&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;home&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
		&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;timer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
		&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;alarm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
		&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;

&lt;span class=&#39;n&#39;&gt;Machine&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;Machine&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;SMach&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;states&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;home&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){}&lt;/span&gt;

&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;Machine&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;run&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;SMach&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;exec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;states&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;this&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

&lt;span class=&#39;kt&#39;&gt;bool&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;Machine&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
	&lt;span class=&#39;c1&#39;&gt;//This is executed when any state within the state machine is active&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;Timer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;wait_msec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;c1&#39;&gt;//Now call the parent action to execute the action within the active state&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;SMach&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see in the action() method, we delay for 10ms. This will be called in the “home”, “timer”, and “alarm” states. Call it a “global” action. If a global state machine action is not used, you don’t need to re-implement the action() method at all.&lt;/p&gt;

&lt;p&gt;Since this “SMach”:/coactionos-applib/html/class_s_mach.html is a top level machine, we don’t implement the exit_condition() method. However, an “SMach”:/coactionos-applib/html/class_s_mach.html is just a special type of “State”:/coactionos-applib/html/class_state.html and can be part of a higher level SMach’s state list.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;State machines are a great way of designing complex firmware programs. Using the Applib “SMach”:/coactionos-applib/html/class_s_mach.html and “State”:/coactionos-applib/html/class_state.html classes makes doing so quick and easy. You can get started now by downloading the attached “state machine project”:/attachments/download/367/state-machine.zip.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Designing-Applications-using-State-Machines</link>
                <guid>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Designing-Applications-using-State-Machines</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Developing on CoActionOS using Eclipse</title>
                <description>&lt;p&gt;Eclipse is an Integrated Development Environement (IDE) that works great for developing CoActionOS applications.&lt;/p&gt;

&lt;p&gt;To start using Eclipse with CoActionOS, you’ll first need to download and install the latest version of Eclipse. You can then import sample projects downloaded from this website into Eclipse. Eclipse can then be used to build and debug programs.&lt;/p&gt;

&lt;h3 id=&quot;download_eclipse&quot;&gt;Download Eclipse&lt;/h3&gt;

&lt;p&gt;Eclipse can be downloaded for free from http://www.eclipse.org/downloads/. You want to download the Eclipse IDE for C/C++ Developers (known as C/C++ Developer Tools or CDT). The download package includes a single zip file.&lt;/p&gt;

&lt;h3 id=&quot;installing&quot;&gt;Installing&lt;/h3&gt;

&lt;h4 id=&quot;windows&quot;&gt;Windows&lt;/h4&gt;

&lt;p&gt;Eclipse is distributed as a zip file. It just needs to be extracted and then you can create a shortcut to the eclipse.exe executable.&lt;/p&gt;

&lt;h4 id=&quot;mac_os_x&quot;&gt;Mac OS X&lt;/h4&gt;

&lt;p&gt;Eclipse is distributed as an application bundle. You can copy the bundle to the /Applications folder (or anywhere else you like) to install Eclipse.&lt;/p&gt;

&lt;h4 id=&quot;linux&quot;&gt;Linux&lt;/h4&gt;

&lt;p&gt;Eclipse is also available on Linux. You can usually just download the latest package and extract the files. Some distributions (Ubuntu, for example) have Eclipse in their built-in software stores.&lt;/p&gt;

&lt;h3 id=&quot;starting_eclipse&quot;&gt;Starting Eclipse&lt;/h3&gt;

&lt;p&gt;When Eclipse starts, it will prompt you for a workspace. The most common place to put the workspace on Windows 7 and Mac OS X is in /Users/username/workspace. On Windows XP, it is easiest to use c:\workspace.&lt;/p&gt;

&lt;p&gt;Once Eclipse starts, you will want to open the C/C++ perspective by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click Window-&amp;gt;Open Perspective-&amp;gt;Other… (or C/C++ if it is shown)&lt;/li&gt;

&lt;li&gt;Highlight C/C++ then click OK&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;adding_a_coactionos_application_to_eclipse&quot;&gt;Adding a CoActionOS Application to Eclipse&lt;/h3&gt;

&lt;p&gt;To add a new project to Eclipse, first import the Hello World sample project. You then rename the project to whatever you wish (but don’t use any spaces or CoActionOS will reject the binary that is created).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=6-rbEx6AV6A&quot;&gt;This youtube video&lt;/a&gt; walks through importing a project in Eclipse.&lt;/p&gt;

&lt;h3 id=&quot;updating_the_include_paths_and_rebuilding_the_index&quot;&gt;Updating the Include Paths and Rebuilding the Index&lt;/h3&gt;

&lt;p&gt;If you are getting code errors in the default Hello World program, you may need to re-initialize the include paths and re-build the index. To do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right click on the project and click “Properties”&lt;/li&gt;

&lt;li&gt;In the left pane, browser to “C/C++ General -&amp;gt; Preprocessor Include Paths”&lt;/li&gt;

&lt;li&gt;In the center of the window, click “Providers”&lt;/li&gt;

&lt;li&gt;Highlight “CDT GCC Builtin Compilter Settings” and then click the “Clear Entries” button in the right pane&lt;/li&gt;

&lt;li&gt;Hit “Apply” then “OK”&lt;/li&gt;

&lt;li&gt;Right click on the project and click “Index -&amp;gt; Rebuild”&lt;/li&gt;
&lt;/ol&gt;</description>
                <link>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-CoActionOS-and-Eclipse</link>
                <guid>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-CoActionOS-and-Eclipse</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Building and Installing CoActionOS</title>
                <description>&lt;h3 id=&quot;building_and_installing_coactionos_static_libraries&quot;&gt;Building and Installing CoActionOS Static Libraries&lt;/h3&gt;

&lt;p&gt;CoActionOS is built as a library. The library just needs to link to the board support package to make the final binary. To build CoActionOS, you need to download the &lt;a href=&quot;https://github.com/CoActionOS/CoActionOS&quot;&gt;source code&lt;/a&gt; and import the CoActionOS project in to Eclipse. Once in Eclipse, you can right click on CoActionOS then click Build Configurations-&amp;gt;Build All. Or you can just click the hammer icon and select the target architecture.&lt;/p&gt;

&lt;p&gt;The build process will launch a script called post-process.sh (unix/linux) or post-process.bat (win32). To install correctly in unix/linux you need to make sure sudo can be run with post-process.sh. The easiest way to do this is to add the folowing line to /etc/sudoers.&lt;br /&gt;Otherwise you can edit the ask-pass.sh program to write your password to the standard output.&lt;/p&gt;
&lt;pre&gt;your_username	ALL=(ALL) NOPASSWD:ALL&lt;/pre&gt;
&lt;h3 id=&quot;building_and_installing_kernel_binaries&quot;&gt;Building and Installing Kernel Binaries&lt;/h3&gt;
&lt;div class=&#39;alert alert-info&#39;&gt;&lt;span class=&#39;label label-danger&#39;&gt;Note&lt;/span&gt; The latest version 
of the CoActionOS library is installed when you download and install the compiler.&lt;/div&gt;
&lt;p&gt;Once the CoActionOS library is built and installed on your development system, you can build the kernel. The kernel is built by downloading a “board support package”:/redmine/projects/hardware/files and importing it in to Eclipse. With the board support package, you can modify what devices and filesystems are available on the board. For example, the CoAction Hero board support package comes with /dev/i2c0, /dev/i2c1, /dev/i2c2. If you comment out the following lines, these devices won’t be available to user applications.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;c1&#39;&gt;//DEVICE_PERIPH(&amp;quot;i2c0&amp;quot;, hwpl_i2c, 0, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//DEVICE_PERIPH(&amp;quot;i2c1&amp;quot;, hwpl_i2c, 1, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//DEVICE_PERIPH(&amp;quot;i2c2&amp;quot;, hwpl_i2c, 2, 0666, USER_ROOT, GROUP_ROOT, S_IFCHR),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#39;alert alert-info&#39;&gt;&lt;span class=&#39;label label-danger&#39;&gt;Note&lt;/span&gt; If you remove 
all three I2C ports, the resulting binary will exclude the I2C driver.  However, if you 
include just one port, the resulting binary will be almost the same size as including 
all three ports.&lt;/div&gt;
&lt;p&gt;The filesystems are also linked in the board support package. You can remove a filesystem by commenting it out. The / (root), /app, and /dev filesystems are required for proper operation. The /home filesystem mount if for storing files on an external flash chip and is not required for normal operation.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;k&#39;&gt;const&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;sysfs_t&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;const&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;sysfs_list&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
	&lt;span class=&#39;c1&#39;&gt;//the folder for ram/flash applications&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;SYSFS_APP&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;/app&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;devices&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;MEM_DEV&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]),&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;SYSFS_ALL_ACCESS&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;SYSFS_DEV&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;/dev&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;devices&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;SYSFS_READONLY_ACCESS&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//devices&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;CAFS_LITE&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;cafs_lite_cfg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;SYSFS_ALL_ACCESS&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//user files&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;SYSFS_ROOT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;sysfs_list&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;SYSFS_READONLY_ACCESS&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//root&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;SYSFS_TERMINATOR&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have the devices and filesystems you want, you just hit the hammer in Eclipse to build the kernel binary. You can then use CoActionOS Link to install the binary.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Building-and-Installing-CoActionOS</link>
                <guid>http://Coactionos.github.io/coactionos-user-guides/2013/12/24/CoActionOS-User-Guide-Building-and-Installing-CoActionOS</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>UART Tutorial</title>
                <description>&lt;p&gt;A UART is used to transmit data serially. CoActionOS Applib makes configuring and using a &lt;a href=&quot;/coactionos-applib/html/class_uart.html&quot;&gt;UART&lt;/a&gt; on CoActionOS both simple and flexible.&lt;/p&gt;

&lt;p&gt;The basic steps to use the UART are to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the UART (power it on)&lt;/li&gt;

&lt;li&gt;Set the attributes (baud rate, pins, etc)&lt;/li&gt;

&lt;li&gt;Read and Write data&lt;/li&gt;

&lt;li&gt;Optionally Close the UART (power it down)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following program demonstrates how to use the UART. The program assumes the TXD line is connected to the RXD line. For more details on using the UART, please see the &lt;a href=&quot;/coactionos-applib/html/class_uart.html&quot;&gt;UART Applib documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For printf&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstring&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for strcpy and memset&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;unistd.h&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for usleep&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Uart.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For the UART class&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Timer.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//General purpose timer based on clock_gettime()&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Uart&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;uart&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//use UART port 0&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Initialize at 115200 baud rate -- other settings use the default&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;uart&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;115200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Discard any stale data in the buffers&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;uart&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;flush&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//The UART is now ready to read and write&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Write:test&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;uart&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;write&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Timer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;wait_msec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//allow a little time for all bytes to be sent&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;memset&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//clear the buffer&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;uart&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;read&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//blocks until at least one byte is received&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Read:%s&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//Show the data that was read&lt;/span&gt;
 
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Uart</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Uart</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Thread Tutorial</title>
                <description>&lt;p&gt;CoActionOS Applib includes a Thread class for easily initializing and running threads. For more details on using this class, please see the &lt;a href=&quot;/coactionos-applib/html/class_thread.html&quot;&gt;Thread Applib documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Thread.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for Thread class&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Timer.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for printf&lt;/span&gt;
 
&lt;span class=&#39;c1&#39;&gt;//function to execute with thread&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;static&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;thread_func&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;args&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Thread&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;t0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//construct the first thread class&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Thread&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;t1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//construct the second thread class&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;t0_args&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//argument for t0&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;t1_args&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//argument for t1&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//create and run t0&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;t0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;create&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;thread_func&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;t0_args&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//create and run t1&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;t1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;create&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;thread_func&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;t1_args&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//wait for the threads to complete&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Timer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;wait_sec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//all done&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;done&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;thread_func&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;args&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;args&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;This thread was passed %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Timer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;wait_sec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;8&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Thread %d is completing&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The threads can be analyzed while they are running by using the Monitor view in CoActionOS Link. The following screen shot shows the running tasks while all three threads are running (the project is called HelloCpp).&lt;/p&gt;

&lt;p&gt;thread-monitor-example.png&lt;/p&gt;

&lt;p&gt;The above program has the following output.&lt;/p&gt;
&lt;pre&gt;This thread was passed 0
This thread was passed 1
Thread 0 is completing
Thread 1 is completing
done
&lt;/pre&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Thread</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Thread</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Strings Tutorial</title>
                <description>&lt;p&gt;The CoActionOS Applib includes a &lt;a href=&quot;/coactionos-applib/html/class_string.html&quot;&gt;String class&lt;/a&gt; similar to the C++ STL string class. The Applib String class avoids using dynamic memory allocation so that it can run well on systems with very little memory. It is based on standard C string manipulation (such as strcpy(), strcmp()) but gives the ease of use of the STL string class.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/String.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
	&lt;span class=&#39;c1&#39;&gt;//String Types allows us to allocate various string sizes&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;StringMedium&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//This is the same as String&amp;lt;64&amp;gt; mstring;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;StringLarge&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//This is the same as String&amp;lt;128&amp;gt; lstring;&lt;/span&gt;

	&lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assignment&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//concatenation&lt;/span&gt;

	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Medium using %d of %d bytes&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;size&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(),&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;capacity&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;());&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Large using %d of %d bytes&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;size&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(),&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;capacity&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;());&lt;/span&gt;


	&lt;span class=&#39;c1&#39;&gt;//Strings can be compared C++ style (to const char*)&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
		&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Hello&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

	&lt;span class=&#39;c1&#39;&gt;//Two strings can also be compared&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
		&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;They are the same&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

	&lt;span class=&#39;c1&#39;&gt;//We can allows write numbers to the string and concatenate strings&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot; Number #&amp;quot;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;c_str&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;());&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//it is converted to a c string just like STL string&lt;/span&gt;

	&lt;span class=&#39;c1&#39;&gt;//We can also concatenation strings&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;I am mstring&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;I am lstring&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;c_str&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;());&lt;/span&gt;

	&lt;span class=&#39;c1&#39;&gt;//copy the first five bytes of lstring to mstring&lt;/span&gt;
	&lt;span class=&#39;c1&#39;&gt;//This is as close as we can get to implementing substr() with dynamic memory allocation&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;Hello mstring&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;clear&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//since copy doesn&amp;#39;t add a 0 terminator - we clear mstirng now&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;lstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;copy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;

	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Now mstring is %s&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mstring&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;c_str&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;());&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That about covers the basics. You can read the &lt;a href=&quot;/coactionos-applib/html/class_string.html&quot;&gt;String class API&lt;/a&gt; for more information.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Strings</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Strings</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>SPI Tutorial</title>
                <description>&lt;p&gt;SPI is a a full duplex serial protocol. It uses four lines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MISO: Master Input/Slave Output (driven by slave when CS is low)&lt;/li&gt;

&lt;li&gt;MOSI: Master Output/Slave Input (driven by master)&lt;/li&gt;

&lt;li&gt;SCK: Serial Clock (driven by master)&lt;/li&gt;

&lt;li&gt;CS: Chip Select (driven by master)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The steps to use the SPI are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the SPI port (power it on)&lt;/li&gt;

&lt;li&gt;Set the attributes (bit rate, pin assignment, etc)&lt;/li&gt;

&lt;li&gt;Configure the PIO pin used with the CS line&lt;/li&gt;

&lt;li&gt;Optionally, set full-duplex mode&lt;/li&gt;

&lt;li&gt;Clear the CS line&lt;/li&gt;

&lt;li&gt;Read and Write data&lt;/li&gt;

&lt;li&gt;Set the CS line&lt;/li&gt;

&lt;li&gt;Optionally Close the SPI port (power it down)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following program demonstrates how to use the SPI in CoActinOS. For more details on using the SPI, please see the &lt;a href=&quot;/coactionos-applib/html/class_spi.html&quot;&gt;SPI Applib documentation&lt;/a&gt;.&lt;br /&gt;The &lt;a href=&quot;/coactionos-applib/html/class_pin.html&quot;&gt;Pin class documentation&lt;/a&gt; may also be helpful.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For printf and perror&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdlib&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for NULL&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstring&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for memset&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Spi.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For the SPI class&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Pin.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For the PIN class&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;buffer_duplex&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Spi&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//use SPI port 0&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Pin&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//use PIO port 2 for the CS&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Initialize the CS line&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PIO_MODE_OUTPUT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;// or use cs.set() or cs.on()&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Initialize at 2MHz bitrate&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2000000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//For full duplex, set the buffer&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;setduplex&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer_duplex&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//read buffer when using write(), write buffer when using read()&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Here is a SPI read&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;// or use cs.clr() or cs.off() to drive the pin low&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;memset&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer_duplex&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mh&#39;&gt;0xFF&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this is written when using read&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;read&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//read 16 bytes to buffer and write 16 bytes from buffer_duplex&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Here is a SPI write&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;memset&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mh&#39;&gt;0xFF&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this is written when using read&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;write&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//write 16 bytes from buffer and read 16 bytes to buffer_duplex&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Put the SPI in half-duplex mode&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;setduplex&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;NULL&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;write&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//buffer is written, incoming data is discarded&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Close the peripherals&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;spi&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;cs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
 
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Spi</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Spi</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Signals Tutorial</title>
                <description>&lt;p&gt;CoActionOS allows uers signals to notify different threads or processes about events. It uses POSIX signals as the underlying API. CoActionOS Applib provides a class to easily send and receive signals. When a thread or process receives a signal, its execution is interrupted and the signal handler is executed. This is distinct from hardware interrupt handlers because the signal interrupt will not execute until the receiving task is scheduled to execute. Also, hardware interrupts run in privileged mode where signal handlers run in user mode.&lt;/p&gt;

&lt;p&gt;The example below shows how to send a signal using software as well as how to enable hardware to send a signal when an event happens.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Timer.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Tmr.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Signal.hpp&amp;gt;&lt;/span&gt;

&lt;span class=&#39;k&#39;&gt;volatile&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;bool&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;done&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;

&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;sigusr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;done&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

&lt;span class=&#39;k&#39;&gt;static&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;software_trigger_example&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;static&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;hardware_trigger_example&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;

&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;software_trigger_example&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;hardware_trigger_example&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Both examples are complete&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;


&lt;span class=&#39;c1&#39;&gt;//this function sets up a handler and triggers it with software&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;software_trigger_example&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;Signal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;Handler&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;handler&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;sigusr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//the function sigusr is called with this handler&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;Signal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;Event&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;event&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;SIGUSR1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;event&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set_handler&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;handler&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;done&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;event&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;trigger&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;getpid&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;());&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//send the signal to this process&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;while&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;done&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
		&lt;span class=&#39;n&#39;&gt;Timer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;wait_usec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;SIGUSR1 has been handled&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

&lt;span class=&#39;c1&#39;&gt;//this function sets up a handler and triggers it with hardware (such as a timer event)&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;hardware_trigger_example&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;Tmr&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//use hardware tmr0 as the triggering mechanism&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;tmr_action_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;Signal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;Handler&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;handler&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;sigusr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//the function sigusr is called with this handler&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;Signal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;EventPhy&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;event&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;SIGUSR1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;

	&lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//tmr0 will run as a 1KHz timer&lt;/span&gt;

	&lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//set timer to 0&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;setoc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;TMR_ACTION_CHANNEL_OC0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//set output compare 0 to 1000 (triggers after one second)&lt;/span&gt;

	&lt;span class=&#39;n&#39;&gt;action&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;event&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;action&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;Tmr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;INTERRUPT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;setaction&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;action&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;done&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;on&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
	&lt;span class=&#39;k&#39;&gt;while&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;done&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
		&lt;span class=&#39;n&#39;&gt;Timer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;wait_usec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
	&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;SIGUSR1 has been handled (triggered by tmr0)&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Signals</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Signals</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>PWM Tutorial</title>
                <description>&lt;p&gt;PWM is used to output a pulse signal. It can be used to dim an LED or apply a variable voltage to a motor.&lt;/p&gt;

&lt;p&gt;The basic steps to use the PWM are to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the PWM port&lt;/li&gt;

&lt;li&gt;Set the attributes (frequency, top, enabled channels)&lt;/li&gt;

&lt;li&gt;Set the duty cycle&lt;/li&gt;

&lt;li&gt;Optionally close the PWM (power it down)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following program demonstrates using a PWM output. For more details on using PWM, please see the &lt;a href=&quot;/coactionos-applib/html/class_pwm.html&quot;&gt;PWM Applib documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for printf&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Pwm.hpp&amp;gt;&lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for PWM class&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Timer.hpp&amp;gt;&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Pwm&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//instantiate PMW Port 1&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;channel&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;PWM_CHANNEL3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//use channel 3&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;channel&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
      &lt;span class=&#39;mi&#39;&gt;10000000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//10MHz frequency&lt;/span&gt;
      &lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//1000 top value&lt;/span&gt;
      &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//PWM Flags (not used on lpc17xx)&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;__PWM1_PINASSIGN_PORT2_0_1_2_3_4_5&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//pin assignment&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//initialize with channel 3 enabled&lt;/span&gt;
 
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Start Updating Duty Cycle&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;channel&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//set channel 3 to duty cycle i / 1000&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;Timer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;wait_msec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//wait 5ms between updates&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Duty Cycle Update Complete&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Pwm</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Pwm</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>PIO Tutorial</title>
                <description>&lt;p&gt;The original Flashing LED article discusses how to access IO on CoActionOS using C/C++. CoActionOS Applib provides C++ classes for easy IO access. The following program demonstrates using a pin to turn the CoAction Hero on-board LED on and off (error checking has been omitted for simplicity). See &lt;a href=&quot;/coactionos-applib/html/class_pin.html&quot;&gt;Pin Class&lt;/a&gt; for more details.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Timer.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Pin.hpp&amp;gt;&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Use PIO port 2 (2.10 has the LED connection)&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Pin&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//open the port&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PIO_MODE_OUTPUT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Turn the LED on&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;LED is on&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;clr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
  &lt;span class=&#39;c1&#39;&gt;//you can also assign boolean values to the object to do the same thing&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Sleep for one second&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Timer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;wait_sec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Turn the LED off&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;LED is off&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
  &lt;span class=&#39;c1&#39;&gt;//or use the = operator with a boolean value&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
 
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Pio</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Pio</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Motor Control Tutorial</title>
                <description>&lt;p&gt;Motor control is simple using CoActionOS. In this example, a simple PID control loop takes the speed of the motor as an input and computes the PWM duty cycle (which sets the motor drive voltage) as the output.&lt;/p&gt;

&lt;p&gt;Here is the circuit diagram for this tutorial.&lt;/p&gt;

&lt;p&gt;motor-demo-diagram.jpg&lt;/p&gt;

&lt;h2 id=&quot;source_code&quot;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;Here is the code. It uses eLib’s PID and EMA functions. After the program initializes, it reads the value of the ADC. It uses this value to calculate the speed set point. It measures the speed of the motor by taking the number of encoder counts and dividing by the elapsed time. These values are fed in to the PID algorithm which computes the PWM value to apply to the motor.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Pwm.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Tmr.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Adc.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;dsp.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;pid.h&amp;gt;&lt;/span&gt;
 
&lt;span class=&#39;cp&#39;&gt;#define TMR_PORT 0 &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//Timer port used to capture encoder data&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define TMR_PINASSIGN 0&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define ADC_PORT 0 &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//ADC port for getting user input&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define ADC_INPUT_CHAN (7) &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//ADC channel for user input&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define PWM_PORT 1 &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//PWM port for Si9986&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define PWM_PINASSIGN 1 &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//Uses P2.x&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define PWM_CHAN_HIGH (PWM_CHANNEL3)&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define PWM_CHAN_LOW (PWM_CHANNEL4)&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define PWM_FREQ (1000000)  &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//PWM clock frequency&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define PWM_TOP 1000 &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//Top value for PWM clock&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define PWM_PERIOD (PWM_TOP*1000/PWM_FREQ) &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//Period in ms&lt;/span&gt;
 
&lt;span class=&#39;c1&#39;&gt;//Set the output duty cycle&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;static&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;set_duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Tmr&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;TMR_PORT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Adc&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;adc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;ADC_PORT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Pwm&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PWM_PORT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//These are for sampling the ADC (user input)&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;adc_sample_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samp_avg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;speed_avg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint16_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alpha&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;set_speed&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//This is for measuring the motor speed&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;delta_ms&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//elapsed time in milliseconds&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;last_ms&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;now_ms&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;ref_ms&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;timespec&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;now&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;current_pos&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//current position&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;last_pos&lt;/span&gt;  &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//position from last measurement&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;delta_pos&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;speed&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//PID variables&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;pid_i32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pid&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Initialize the hardware&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;adc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;ADC_INPUT_CHAN&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;TMR_CLKSRC_IC0&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;|&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;TMR_CLKSRC_EDGERISING&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;TMR_PINASSIGN&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;((&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PWM_CHAN_HIGH&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;|&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PWM_CHAN_LOW&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;PWM_FREQ&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;PWM_TOP&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;PWM_PINASSIGN&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Turn the motor encoder timer on and set to zero&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;on&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Initialize the ADC averaging (EMA filter)&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;alpha&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;DSP_EMA_I32_ALPHA&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mf&#39;&gt;0.1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;adc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;read&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;ADC_INPUT_CHAN&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;samp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;sizeof&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;adc_sample_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;samp_avg&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;speed_avg&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Since there is no initial measurement, the first speed will be bogus&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;last_ms&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//initialize the PID&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pid_init_i32&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;pid&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;50&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;990&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//Bound the duty between 10% and 99%&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pid_setconstants_i32&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;pid&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;PID_I32_CONSTANT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mf&#39;&gt;5.0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//P constant&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;PID_I32_CONSTANT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mf&#39;&gt;0.2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//I constant&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;PID_I32_CONSTANT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mf&#39;&gt;0.0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//D constant&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;n&#39;&gt;usleep&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;50&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;set_duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Get the initial time so that the program start time is close to zero in the output data&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;clock_gettime&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;CLOCK_REALTIME&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;now&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;ref_ms&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;now&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tv_sec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;now&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tv_nsec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;500000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1000000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//convert to milliseconds&lt;/span&gt;
 
  &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;while&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//Read and averge the ADC to get the set point&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;adc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;read&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;ADC_INPUT_CHAN&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;samp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;sizeof&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;adc_sample_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;samp_avg&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dsp_ema_i32&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;samp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samp_avg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alpha&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;set_speed&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samp_avg&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;130&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;ADC_MAX&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;50&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//speed sets between 50 and 180&lt;/span&gt;
 
    &lt;span class=&#39;c1&#39;&gt;//Now measure the position and calculate the speed (pos/time)&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;clock_gettime&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;CLOCK_REALTIME&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;now&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;now_ms&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;now&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tv_sec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;now&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tv_nsec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;500000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1000000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//convert to milliseconds&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;delta_ms&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;now_ms&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;last_ms&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;last_ms&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;now_ms&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
 
    &lt;span class=&#39;n&#39;&gt;current_pos&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tmr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;get&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;delta_pos&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;current_pos&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;last_pos&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//calculate in RPM (1000*60 ms in a min and 200 counts per revolution)&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;speed&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;delta_pos&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;60&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;465&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;delta_ms&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;last_pos&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;current_pos&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
    &lt;span class=&#39;c1&#39;&gt;//Calculate the new duty cycle&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;duty&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pid_update_i32&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set_speed&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;speed&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;pid&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;set_duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
    &lt;span class=&#39;n&#39;&gt;speed_avg&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dsp_ema_i32&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;speed&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;speed_avg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alpha&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
    &lt;span class=&#39;c1&#39;&gt;//Display the data and wait for the next update&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//first sample is garbage because the delta values are invalid&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;%d %d %d %d;&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;now_ms&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;ref_ms&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set_speed&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;speed_avg&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;usleep&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//update every 100 ms&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
 
&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;set_duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Pwm&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PWM_PORT&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;c1&#39;&gt;//This runs in run mode -- one output is switching the other is high&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PWM_CHAN_HIGH&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;  &lt;span class=&#39;n&#39;&gt;PWM_TOP&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;duty&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;pwm&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;set&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PWM_CHAN_LOW&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;PWM_TOP&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=V6nnVzJFD_Q&quot;&gt;video&lt;/a&gt; shows the motor being controlled with the potentiometer input.&lt;/p&gt;

&lt;p&gt;The data is plotted using MATLAB (or octave) using the following script.&lt;/p&gt;
&lt;pre&gt;
output = load(&quot;log.txt&quot;);
xmin = min( output(:,1) );
xmax = max( output(:,1) );
ymax = 200;
plot(output(:,1), output(:,2), output(:,1), output(:,3), output(:,1), output(:,4)/10 );
xlabel(&quot;Time (ms)&quot;);
ylabel(&quot;Speed&quot;);
axis([xmin xmax 0 ymax]);
legend(&quot;Set Point&quot;, &quot;Speed&quot;, &quot;Duty*100&quot;);
print(&quot;output.png&quot;, &quot;-dpng&quot;);
&lt;/pre&gt;
&lt;p&gt;motor-demo-plot.png&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Motor-Control</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Motor-Control</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>I2C Tutorial</title>
                <description>&lt;p&gt;I2C is a half duplex serial protocol. It uses two lines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SDA: Serial Data&lt;/li&gt;

&lt;li&gt;SCL: Serial Clock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many devices can be connected to the same bus. The master uses slave address to communicate with each device. Most I2C devices use a pointer (or location) register to control where reads and writes are performed. CoActionOS uses a normal I2C transfer to handle these devices. The chronology of a normal I2C read is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I2C Start&lt;/li&gt;

&lt;li&gt;Write I2C Address with write bit&lt;/li&gt;

&lt;li&gt;Write the pointer or location register&lt;/li&gt;

&lt;li&gt;I2C Restart&lt;/li&gt;

&lt;li&gt;Write the I2C address with read bit&lt;/li&gt;

&lt;li&gt;Read data from the I2C device&lt;/li&gt;

&lt;li&gt;I2C Stop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And a write is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I2C Start&lt;/li&gt;

&lt;li&gt;Write I2C Address with write bit&lt;/li&gt;

&lt;li&gt;Write the pointer or location register&lt;/li&gt;

&lt;li&gt;Write data to the I2C device&lt;/li&gt;

&lt;li&gt;I2C Stop&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The steps to use the I2C are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the I2C port (power it on)&lt;/li&gt;

&lt;li&gt;Set the attributes (bit rate, pin assignment)&lt;/li&gt;

&lt;li&gt;Setup the I2C transfer (set the slave address and transfer type)&lt;/li&gt;

&lt;li&gt;Read and Write data&lt;/li&gt;

&lt;li&gt;Optionally Close the I2C port (power it down)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following program demonstrates using the &lt;a href=&quot;/coactionos-applib/html/class_i2c.html&quot;&gt;CoActionOS Applib I2C class&lt;/a&gt;. For more details on using the I2C, please see the &lt;a href=&quot;/coactionos-applib/html/class_i2c.html&quot;&gt;I2C Applib documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For printf and perror&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/I2c.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For the I2C class&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;I2c&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i2c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//I2C port 0&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//initialize at 400KHz bitrate (open and set attributes)&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;i2c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;400000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//setup a normal transfer for slave address 0x4C&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;i2c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;setup&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mh&#39;&gt;0x4C&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;n&#39;&gt;i2c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;read&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//location in I2C device memory to start reading (e.g. register 0)&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;buffer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//destination memory&lt;/span&gt;
      &lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//number of bytes to read&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//close the port&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;i2c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
 
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-I2C</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-I2C</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Files Tutorial</title>
                <description>&lt;p&gt;Files can be accessed in several ways in CoActionOS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;standard C library (fopen(), fread(), etc)&lt;/li&gt;

&lt;li&gt;POSIX API (open(), read(), etc)&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;/coactionos-applib/html/class_file.html&quot;&gt;Applib File Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The program below demonstrates how to use the &lt;a href=&quot;/coactionos-applib/html/class_file.html&quot;&gt;Applib File Class&lt;/a&gt;. It uses POSIX calls to access files but is easier to code than using POSIX.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For printf and perror&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdlib&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for exit()&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstring&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for strcpy and memset&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/File.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For the File class&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;64&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;File&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//Declare f as a File class&lt;/span&gt;
 
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Create a new file&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Create a new file&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;create&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;/home/myfile.txt&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;perror&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;failed to create file&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Construct a string in a temporary variable&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;strcpy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;This is a string to write to the file&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Write data to the file&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;write&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;strlen&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;perror&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;failed to write&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Close the file&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Clear the contents of tmp&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;memset&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;64&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Open the file for reading&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;open&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;/home/myfile.txt&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Read and show contents&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;read&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;64&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Read:%s&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Close the file&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;f&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;close&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
 
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Files</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-Files</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>AIO Tutorial</title>
                <description>&lt;p&gt;Asynchronous IO (AIO) is used when you want to start an operation and do other things while you wait until the operation completes. AIO is supported on all peripherals which support read() and write(). Simply pass an Aio object to read() or write(), and the operation will perform asynchronously.&lt;/p&gt;

&lt;p&gt;The following program demonstrates AIO using the DAC. See the &lt;a href=&quot;/coactionos-applib/html/class_aio.html&quot;&gt;AIO class documenation&lt;/a&gt; and &lt;a href=&quot;/coactionos-applib/html/class_dac.html&quot;&gt;DAC class documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/DbugStdout.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For the DbugStdout class (or just use printf() is you prefer)&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Dac.hpp&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//For the DbugStdout class&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;applib/Aio.hpp&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;cstdio&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//for perror&lt;/span&gt;
 
&lt;span class=&#39;cp&#39;&gt;#define NUM_SAMPLES 32&lt;/span&gt;
 
&lt;span class=&#39;c1&#39;&gt;//This function generates a sin wave for use with the DAC&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;static&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;sin_to_dac&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;dac_sample_t&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;nsamples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;dac_sample_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NUM_SAMPLES&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Dac&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dac&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;DbugStdout&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;Aio&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;aio&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;samples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NUM_SAMPLES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;sizeof&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;dac_sample_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this is the Aio object&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//Initialize the DAC&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dac&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NUM_SAMPLES&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//enable channel 0 with 1KHz sine wave&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;perror&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;failed to init&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
  &lt;span class=&#39;c1&#39;&gt;//populate the samples with a sine wave&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;sin_to_dac&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;samples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NUM_SAMPLES&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
  &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
 
    &lt;span class=&#39;c1&#39;&gt;//this is a synchronous write -- does not return until write is complete&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;dac&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;write&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NUM_SAMPLES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;sizeof&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;dac_sample_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt;
 
    &lt;span class=&#39;c1&#39;&gt;//do an asynchronous write of the samples -- returns immediately&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;dac&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;write&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aio&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
    &lt;span class=&#39;c1&#39;&gt;//wait for the operation to complete&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;while&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;aio&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inprogress&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;true&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;usleep&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
    &lt;span class=&#39;c1&#39;&gt;//check for errors&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;aio&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;ret&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;errno&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;aio&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;error&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;perror&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;failed to complete write&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
  &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;Done&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
 
 
&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;sin_to_dac&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;dac_sample_t&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;nsamples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;DbugStdout&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;dac_sample_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;sample&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;kt&#39;&gt;float&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;nsamples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;sin&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;M_PI&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nsamples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//tmp is from -1 to 1&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;samples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;dac_sample_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tmp&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;DAC_MAX_VALUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;DAC_MAX_VALUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;samples&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
  &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-AIO</link>
                <guid>http://Coactionos.github.io/coactionos-tutorials/2013/12/24/CoActionOS-Tutorial-AIO</guid>
                <pubDate>2013-12-24T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Hello World</title>
                <description>&lt;p&gt;Programming tutorials, as you will notice, always begin with the quintessential “Hello World” program which demonstrates: how to use compilers, the basic usage of the language, and how to use output–essential for seeing if your program is working correctly. The code below is the standard C Hello World program.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;c1&#39;&gt;//include is a compiler directive and .h refers to a header file&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//contains the prototype for printf&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//contains the prototype for exit&lt;/span&gt;

&lt;span class=&#39;c1&#39;&gt;//main is the symbol that the OS looks for to enter the program&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;  
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Hello World&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//printf is part of stdio&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#39;alert alert-info&#39;&gt;&lt;span class=&#39;label label-danger&#39;&gt;Note&lt;/span&gt; The program above also exposes preprocessor directives, 
raw data types, as well as pointers and arrays. These principles are discussed 
in later lessons. &lt;/div&gt;
&lt;p&gt;The program has the following output.&lt;/p&gt;
&lt;pre&gt;Hello World&lt;/pre&gt;
&lt;h3 id=&quot;compiling_hello_world&quot;&gt;Compiling Hello World&lt;/h3&gt;

&lt;p&gt;The compiler is a software program that converts C code into an executable program. Most embedded systems use cross-compilers meaning that the operating system used to compile the code is not the same as the operating system used to run the code. CoActionOS uses a cross-compiler on Mac OS X or Windows to create programs that run on embedded hardware (this tutorial has the details for doing that).&lt;/p&gt;

&lt;p&gt;Using the word compiler is a simplification of what is actually happening. “Compiling” is a multi-step process that starts with C files and produces executable files or libraries. The compiler converts the C code (text) to object code. The object code is then either converted to a library using an archiver program or an executable using a linker program.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#39;post_image&#39; src=&#39;/images/compiler-library-flow.svg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Process Flow for Creating Libraries&lt;/p&gt;

&lt;p&gt;A library is a collection of object code files that is purposed for many different executables. For example, a library may contain code that computes a generic cosine. The library can then be used in executables that use a cosine calculation in various applications.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#39;post_image&#39; src=&#39;/images/compiler-executable-flow.svg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Process Flow for Creating Embedded Binary Files&lt;/p&gt;

&lt;p&gt;Libraries and object files are linked together to create an executable image. For desktop systems, this is the end of the process. However, most embedded systems require the executable image be translated to either a binary or hex file so that it can be loaded in embedded RAM or flash memory.&lt;/p&gt;

&lt;p&gt;The compiler is typically a command-line based program, but most developers use an integrated development environment (IDE) to both edit the code as well as compile and run programs. Eclipse is one popular, free IDE that includes C/C++ development tools. Eclipse is great for use with CoActionOS.&lt;/p&gt;

&lt;h3 id=&quot;program_structure&quot;&gt;Program Structure&lt;/h3&gt;

&lt;p&gt;The Hello World program introduces the modular programming structure of the C language. Programs consist of functions and data which are either native to the program or part of another module packaged in a library. The Hello World program does not declare any data and has just a single function, main(), which uses printf() and exit() which are part of separate modules from the C Standard library. The OS that runs the program uses main() as the entry point which is standard for C programming. In the example above, main() is declared with two parameters argc and argv which is the norm for desktop operating systems. For some embedded systems, main() may be declared more simply (see below) because only one program is ever installed on the system and no parameters are passed to main().&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;c1&#39;&gt;//OS doesn&amp;#39;t pass any arguments to main(), int is returned&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before running main(), the OS runs startup code referred to as the C-runtime (CRT) code which initializes the program. The program then executes statements–separated by semi-colons–sequentially meaning printf() is first executed then exit() is executed.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#39;post_image&#39; src=&#39;/images/hello-flow.svg&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;standard_output&quot;&gt;Standard Output&lt;/h2&gt;

&lt;p&gt;Hello World uses the printf() function from the stdio module. The stdio, or standard input/output, module includes functions and data useful for inputting data to the program (from the keyboard for example) and outputting data to the user (such as through a console or terminal program). Specifically, printf() writes a formatted string to the standard output. The OS determines what the standard output is. On a desktop computer, it is a console or terminal program. On an embedded system, printf() may output data to a UART serial port or over the USB–the default action for CoActionOS.&lt;/p&gt;

&lt;h2 id=&quot;take_away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;The important things to learn here are that C is a modular programming language consisting of functions and data; the OS entry point for a C program is the main() function; the basic function used for text output is printf() which is used extensively in C during development for debugging.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/20/Embedded-C-Tutorial-Hello-World</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/20/Embedded-C-Tutorial-Hello-World</guid>
                <pubDate>2013-12-20T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Using Op Amps in Embedded Design</title>
                <description>&lt;p&gt;Op-amps are very useful devices in electronics and can be very helpful when interfacing analog and digital technologies in embedded systems. &lt;img class=&#39;post_image&#39; src=&#39;/images/inverting-opamp.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction_to_opamps&quot;&gt;Introduction to Op-Amps&lt;/h2&gt;

&lt;p&gt;An op-amp (or operational amplifier) is a very common electrical circuit widely used in the electronics industry. It has two inputs (plus and minus) as well as one output. Traditional op-amps require a positive and negative voltage supply (e.g. plus and minus 15V) and the output voltage is limited to within about a volt of each rail–meaning the maximum output for an op-amp with a 15V supply is around 14V. This presents a problem in single supply systems with traditional digital voltage levels. Traditional op-amps are not able to take advantage of the full range of ADCs nor definitively drive digital inputs. The rail problem is overcome by using rail-to-rail op-amps which are designed for single supply operation and can drive its output within a few millivolts of the power rails. Rail-to-rail op-amps are particularly well suited for embedded systems integration. Before looking at some typical applications, it is important to understand how to analyze an op-amp circuits.&lt;/p&gt;

&lt;h2 id=&quot;analyzing_opamp_circuits&quot;&gt;Analyzing Op-amp Circuits&lt;/h2&gt;

&lt;p&gt;Ideal op-amps are a good first order approximation of op-amp behavior and are used to analyze as well as design op-amp circuits. The ideal op-amp has two basic rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Infinite Input Impedance (no current flows in or out of the input terminals)&lt;/li&gt;

&lt;li&gt;Output forces voltage difference on inputs to zero in closed-loop designs (meaning the voltage at both input terminals is the same)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To apply these two rules to op-amp circuit analysis, it is important to be familiar with two electrical laws: Ohm’s Law and Kirchhoff’s Current Law. Ohm’s law is defined by the equation:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#39;post_equation&#39; src=&#39;/images/ohms-law.svg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;That is, voltage is equal to current times resistance. Ohm’s law can be used to calculate the current through the resistor in the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ohms-law-circuit.png&quot; alt=&quot;Ohms Law Circuit&quot; title=&quot;Ohm&#39;s Law Circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kirchhoff’s current law states that the sum of all currents entering a node is zero. The law implies that all currents entering the node are equal to the currents leaving the node. This law can be applied to the op-amp circuit above (first in the article).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/opamp-kirchhoff-0.svg&quot; alt=&quot;Kirchoff Current Law&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If Ohm’s law is combined with Kirchhoff’s current law, the equation then becomes the following.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/opamp-kirchhoff-1.svg&quot; alt=&quot;Kirchoff Current Law&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The equation is simplified further by applying the rules of an ideal op-am. First, infinite input impedance means that the current, &lt;em&gt;&lt;em&gt;i&lt;/em&gt;&lt;/em&gt; ~3~ is zero. Second, the voltage difference on the inputs is zero means &lt;em&gt;&lt;em&gt;V&lt;/em&gt;&lt;/em&gt; ~&lt;em&gt;n&lt;/em&gt;~ = &lt;em&gt;&lt;em&gt;V&lt;/em&gt;&lt;/em&gt; ~p~ = &lt;em&gt;&lt;em&gt;0V&lt;/em&gt;&lt;/em&gt;. The resulting equation is as follows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/opamp-kirchhoff-2.svg&quot; alt=&quot;Kirchoff Current Law&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To calculate the gain of the circuit, the above equation is solved for the output divided by the input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/opamp-kirchhoff-3.svg&quot; alt=&quot;Kirchoff Current Law&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The op-amp circuit shown above is called an inverting amplifier (the output is the input times a negative number). As drawn, the inverting amplifier is not well adapted to single supply embedded systems because the output is centered at 0V. However, there are plenty of great ways to use op-amps in single supply, embedded designs.&lt;/p&gt;

&lt;h2 id=&quot;using_opamps_in_embedded_systems&quot;&gt;Using Op-amps in Embedded Systems&lt;/h2&gt;

&lt;p&gt;Op-amps are great in embedded systems when mixing analog and digital circuitry. One common use is signal conditioning before sampling with an analog-to-digital converter (ADC). The op-amp can also be used as a comparator for comparing thresholds or as a frequency counter.&lt;/p&gt;

&lt;h2 id=&quot;signal_conditioning_example&quot;&gt;Signal Conditioning Example&lt;/h2&gt;

&lt;p&gt;A pressure sensor typically has an output in the millivolt range. To measure this voltage with an ADC on a microcontroller, an op-amp is used to scale the output of the pressure sensor to span the range of the ADC input. For example, if the pressure sensor output is zero volts to 250mV and the ADC input range is zero to 2.5V, the amplifier needs to magnify the sensor output with a gain of 10. Because all the voltages are positive, the desired op-amp configuration is a non-inverting op-amp.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/non-inverting-opamp.png&quot; alt=&quot;Kirchoff Current Law&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The analysis technique described above shows that the output of the op-amp is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/opamp-kirchhoff-4.svg&quot; alt=&quot;Kirchoff Current Law&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the feedback resistor is 9KOhms and the input resistor is 1KOhms, the gain will be 10 such that the output of the pressure sensor will be scaled to take advantage of the full range of the ADC.&lt;/p&gt;

&lt;h2 id=&quot;frequency_counter_example&quot;&gt;Frequency Counter Example&lt;/h2&gt;

&lt;p&gt;Another useful application of the op-amp is a sine-wave to square-wave converter which can be input to a timer clock input to measure frequency. For example, if you have a sine wave in your embedded application and want to measure the frequency, you can pass the wave through an op-amp and use a timer on the microcontroller to count rising edges. Converting the rising edges to frequency can be done in one of two ways. The fast way is to count the number of MCU clock cycles between rising edges; this method works well if the MCU clock speed is much higher have the input frequency. The slow way is to count the number of rising edges in a given period of time. Either method uses the circuit below to convert the sine wave to a square wave that can act as the timer input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/freq-counter-circuit.png&quot; alt=&quot;Kirchoff Current Law&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first stage of the circuit adjusts the sine wave to be centered around Vcc/2. Rf and Ri can be adjusted so that the output swing of the first amplifier is between 0V and Vcc. The second op-amp acts as a voltage comparator. If the input (on the inverting terminal) is greater than Vcc/2 (the non-inverting terminal), the output is zero volts. If the inverting input is less than Vcc/2, the output is Vcc assuming the op-amp is of the rail-to-rail variety.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Op-amps are great for analog signals in digital designs (especially rail-to-rail op-amps). The ideal op-amp as well as knowledge of basic electrical principles greatly simplify designing and integrating op-amps in your embedded designs.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/embedded/2013/12/14/Using-Op-Amps-in-Embedded-Design</link>
                <guid>http://Coactionos.github.io/embedded/2013/12/14/Using-Op-Amps-in-Embedded-Design</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Raw Types</title>
                <description>&lt;h1 id=&quot;raw_types&quot;&gt;Raw Types&lt;/h1&gt;

&lt;h2 id=&quot;using_data_in_programming&quot;&gt;Using Data in Programming&lt;/h2&gt;

&lt;p&gt;Programs are created to do something useful–in embedded systems, to make a device or gadget do something useful. As a means to an end, the program uses data and operations. For example, a motor’s position is represented as data in a program; the motor’s speed, also represented as data, can be calculated using various operations given the change in motor positions for a given period of time. This tutorial introduces C raw data types. The following code snippet illustrates how to use data in C and introduces the raw data type int.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//this declares exit()&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;unistd.h&amp;gt; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//this contains usleep()&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;quot;motor.h&amp;quot; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//this is a fictitious header than contains get_motor_position()&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//This is where the data variables are declared--All variables must be declared before use&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//Since they are declared inside main&amp;#39;s {}, they are local to the main function&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;motor_pos0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;motor_pos1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//comma&amp;#39;s can be used to separate declarations&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;motor_speed&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//or each declaration can be declared on a new line&lt;/span&gt;
 
     &lt;span class=&#39;n&#39;&gt;motor_pos0&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;get_motor_position&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//assign the motor position to motor_pos0&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;usleep&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;                       &lt;span class=&#39;c1&#39;&gt;//wait for 1ms (1000 microseconds)&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;motor_pos1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;get_motor_position&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;();&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//assign the updated motor position to motor_pos1&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//now we use the motor positions values and some operators to calculate the speed&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;motor_speed&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;motor_pos1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;motor_pos0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1000&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//exit the program&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;data_types&quot;&gt;Data Types&lt;/h2&gt;

&lt;p&gt;Raw data types are represented by C keywords. Due to the nature of binary numbers, raw data types in C come in eight-bit chunks. Eight-bit chunks are combined to make-up the various raw data types in C: char, short, int, and long. The following is a list of the raw data types in C.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8 bits wide ** unsigned char 0 to 255 ** signed char -128 to 127 ** char either signed or unsigned depending on the implementation and the usage; typically used to represent characters in a string&lt;/li&gt;

&lt;li&gt;(At least) 16 bits wide ** unsigned short 0 to 65535 ** or unsigned short int ** signed short -32768 to 32767 ** or short, short int, signed short int&lt;/li&gt;

&lt;li&gt;(At least) 32 bits wide ** unsigned long 0 to 4294967296 (just over 4 billion) ** or unsigned long int ** signed long -2147483648 to 2147483647 (about -2 billion to 2 billion) ** or signed long int, long, long int&lt;/li&gt;

&lt;li&gt;(At least) 64 bits wide ** unsigned long long 0 to 1.8446744E+19 or 2^64 (appropriately named long, long number) ** or unsigned long long int ** signed long long -2^63 to (2^63)-1 ** or signed long long int, long long, long long int&lt;/li&gt;

&lt;li&gt;At least 16-bits but highly architecture dependent ** unsigned int 0 to architecture dependent value ** int is architecture optimized so 32-bit architectures use 32-bit integers ** Since int is at least 16-bits, 8-bit architectures are not optimized to use int ** signed int or int -2^(architecture-1) to (2^(architecture-1)) - 1&lt;/li&gt;

&lt;li&gt;Floating point types ** float single precision, 32-bits (most common on embedded architectures) ** double double precision, 64-bits ** long double extending precision 80-bits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above data types can introduce ambiguity when porting code from one architecture to the next. To help eliminate the ambiguity, the C99 standard introduced the stdint.h header. It defines the following types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uint8_t, int8_t: unsigned, signed 8-bit integer&lt;/li&gt;

&lt;li&gt;uint16_t, int16_t: unsigned, signed 16-bit integer&lt;/li&gt;

&lt;li&gt;uint32_t, int32_t: unsigned, signed 32-bit integer&lt;/li&gt;

&lt;li&gt;uint64_t, int64_t: unsigned, signed 64-bit integer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These types are not raw data types but type definitions (explained later) derived from the raw data types.&lt;/p&gt;

&lt;p&gt;The raw floating-point types must be taken in context. Most embedded processors do not natively support floating point math. This means the compiler must use software to support these types. On small, 8-bit architectures, floating point math takes up too much code space and execution time to be practical. For 32-bit systems, the code space is still substantial, but the execution time is reasonable for some applications. Even in this case, it is not wise (or even supported in some cases) to use double or long double types.&lt;/p&gt;

&lt;h2 id=&quot;take_away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;Raw types in C come in integer and floating point types. Integers are much more prevalent on embedded systems than floating point values. The int type is architecture optimized and possibly the most commonly used type. The C99 standard introduced a header that eliminates ambiguity on integer types using int8_t, int32_t, etc.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Raw-Types</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Raw-Types</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Preprocessor</title>
                <description>&lt;h1 id=&quot;preprocessor_directives&quot;&gt;Preprocessor Directives&lt;/h1&gt;

&lt;p&gt;The C language preprocesses all code before compilation. Within the program, preprocessor directives give special instructions to the preprocessor. Preprocessor directives in C start with the hash symbol (#). This tutorial describes the basic function of preprocessor directives in C. The following directives are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h1 id=&quot;include_include_another_file_in_the_source&quot;&gt;include: include another file in the source&lt;/h1&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h1 id=&quot;define_define_a_symbol_to_be_replaced_during_preprocessing&quot;&gt;define: define a symbol to be replaced during preprocessing&lt;/h1&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h1 id=&quot;undef_undefine_a_previously_defined_symbol&quot;&gt;undef: un-define a previously defined symbol&lt;/h1&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h1 id=&quot;if_ifdef_ifndef_else_endif_tell_the_preprocessor_to_conditionally_compile_parts_of_the_code&quot;&gt;if, #ifdef, #ifndef, #else, #endif: tell the preprocessor to conditionally compile parts of the code&lt;/h1&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h1 id=&quot;pragma_give_a_special_instruction_to_the_compiler&quot;&gt;pragma: give a special instruction to the compiler&lt;/h1&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h1 id=&quot;error_specify_a_userdefined_error&quot;&gt;error: specify a user-defined error&lt;/h1&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h1 id=&quot;warning_specifiy_a_userdefine_warning&quot;&gt;warning: specifiy a user-define warning&lt;/h1&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;h1 id=&quot;include&quot;&gt;include&lt;/h1&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the preprocessor encounters the #include directive, it replaces the #include line with the contents of the included file. Local files are included using quotation marks while system files are included using less/greater than symbols.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//This is a system file &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;quot;local.h&amp;quot; &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//This is a local include file &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;define_and_undef&quot;&gt;#define and #undef&lt;/h3&gt;

&lt;p&gt;When the preprocessor encounters the #define directive, it replaces the symbol with the specified definition. As a matter of convention, defined symbols are written in all capital letters using underscores to separate words. The #undef directive can be used to remove the definition of a previous #define. The following program shows the basic usage of #define.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define INIT_X_VALUE 10 &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define INIT_Y_VALUE 100 &lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt; 
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;INIT_X_VALUE&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;INIT_Y_VALUE&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;X is %d, Y is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;if_ifdef_ifndef_else_endif&quot;&gt;#if, #ifdef, #ifndef, #else, #endif&lt;/h3&gt;

&lt;p&gt;The conditional directives tell the compiler to omit or include certain code snippets based on various criteria. Let’s start with a program example.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define DEBUG 1&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#ifdef DEBUG&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define debug_printf(...) printf(__VA_ARGS) &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#else &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define debug_printf(...) &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#endif &lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;debug_printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;This is a debug message&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The preceding program illustrates one way to enable and disable debugging messages in a program. It uses the #ifdef directive to tell the compiler to use printf() if DEBUG is defined and just use an empty statement if it is not.&lt;/p&gt;

&lt;p&gt;One standard use of the #ifndef directive is called a header guard. If a single program includes the same header more than once, this can sometimes cause problems because some types may be defined more than one time. A header guard prevents these problems by defining a new symbol and only including the header if the new symbol has not yet been defined. This ensures the preprocessor only includes the file one time.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#ifndef MY_HEADER_FILE_H_&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define MY_HEADER_FILE_H_&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;my_int_type&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;my_function_prototype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#endif &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//end if for MY_HEADER_FILE_H_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;error_and_warning&quot;&gt;#error and #warning&lt;/h3&gt;

&lt;p&gt;The #error and #warning directives allow for user defined errors and warnings that the compiler picks uThe utility of these directives is in making sure the program is configured correctly if there are limits on what conditions the program may compile. The following program illustrates how these directives may be used.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define DEBUG 1 &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#if DEBUG != 0 &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define debug_printf(...) printf(__VA_ARGS) &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#warning &amp;quot;Debugging is turned on&amp;quot; &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#else #define debug_printf(...) &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#endif &lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;debug_printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;This is a debug message&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program above uses a preprocessor directive that causes the compiler to warn the user if debugging is enabled. In other situations, #error might be more appropriate. For example, if the user has defined a value that is not in a valid range.&lt;/p&gt;

&lt;h3 id=&quot;pragma&quot;&gt;#pragma&lt;/h3&gt;

&lt;p&gt;The #pragma directive gives special instructions to the compiler. The #pragma directive is especially useful in embedded C programming and can tell the compiler to allocate a certain variable in RAM or EEPROM. It can also tell the compiler to insert a snippet of assembly language code.&lt;/p&gt;

&lt;p&gt;The GNU GCC compiler, which is a popular compiler for various embedded architectures such as ARM and AVR, also uses attributes as an alternative syntax to the #pragma directive.&lt;/p&gt;

&lt;h3 id=&quot;take_away&quot;&gt;Take Away&lt;/h3&gt;

&lt;p&gt;C language compilers always preprocess the code and execute any preprocessor directives during that stage. The most commonly used preprocessor directives (especially among beginners) are #include and #define. #include is simple to use; you just need to remember quotes for local files and less/greater than symbols for system files. #define is handy for code maintenance. If a value is fixed, it should be defined as a macro so that if it needs to be changed, it only needs to be changed in one location. Lastly, if you create your own header file, it is imperative that you use a header guard of the form: #ifndef NAME_H_, #define NAME_H_, … #endif.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Preprocessor</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Preprocessor</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Pointers and Arrays</title>
                <description>&lt;h1 id=&quot;pointers_and_arrays&quot;&gt;Pointers and Arrays&lt;/h1&gt;

&lt;p&gt;Pointers and arrays are powerful tools in C programming. While arrays are a straightforward concept, pointers are more difficult for new programmers to grasNonetheless, they are worth learning as they are an essential part of the C language.&lt;/p&gt;

&lt;p&gt;Conceptually arrays are lists of data, but more specifically they are an abstration of pointers. The namesake of pointers offer a clue as to what they are. Rather than be variables with a meaningful value, they “point” to variables that have a meaningful value. The value of a pointer is actually the memory address of the pointed to variable.&lt;/p&gt;

&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;/h2&gt;

&lt;p&gt;An array in C is declared using brackets after the variable. In the declaration, the number inside the brackets represents how many elements are in the array. When assigning or reading values in the array, brackets are used again, but in this case, the number inside the brackets refers to which element (from zero to the total number of elements minus one) to assign or read. The example below helps to clarify how to use arrays.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xlist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//declares an array of ten integers&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
     &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;xlist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assign i to the xlist&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;xlist[%d] = %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xlist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]);&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above program has the following output:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;xlist&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;0&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 0
xlist&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;1&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 2
xlist&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;2&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 4
xlist&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;3&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 6
xlist&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;4&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example above demonstrates a one-dimensional array. In C, arrays can also be declared as multi-dimensional. Multi-dimensional arrays are stored in memory in row-major order. This means, the first row in memory is first, followed by the second row, and so on. This is contrasted to column-major order which stores the first column in memory first. The following program shows multi-dimensional array usage.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;j&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;][&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;},&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;6&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;8&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;9&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;j&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;j&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;j&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;a[%d][%d] = %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;j&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;][&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;j&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;0xX=%d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above program has the following output.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;0&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;0&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 1
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;0&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;1&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 2
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;0&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;2&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 3
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;0&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;3&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 4
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;0&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;4&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 5
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;1&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;0&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 6
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;1&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;1&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 7
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;1&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;2&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 8
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;1&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;3&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 9
a&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;1&lt;span class=&#39;o&#39;&gt;][&lt;/span&gt;4&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 10
&lt;span class=&#39;nv&#39;&gt;0x10002F90&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;1
&lt;span class=&#39;nv&#39;&gt;0x10002F94&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;2
&lt;span class=&#39;nv&#39;&gt;0x10002F98&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;3
&lt;span class=&#39;nv&#39;&gt;0x10002F9C&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;4
&lt;span class=&#39;nv&#39;&gt;0x10002FA0&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;5
&lt;span class=&#39;nv&#39;&gt;0x10002FA4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;6
&lt;span class=&#39;nv&#39;&gt;0x10002FA8&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;7
&lt;span class=&#39;nv&#39;&gt;0x10002FAC&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;8
&lt;span class=&#39;nv&#39;&gt;0x10002FB0&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;9
&lt;span class=&#39;nv&#39;&gt;0x10002FB4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that when the 2x5 array is declared, it is a[rows][columns].&lt;br /&gt;We use a pointer (explained below) to show where in memory each element is stored. The first row is stored in the first 20 bytes (four bytes per integer), and the second row occupies the next 20 bytes which is defined as row-major order.&lt;/p&gt;

&lt;h3 id=&quot;pointers&quot;&gt;Pointers&lt;/h3&gt;

&lt;p&gt;The value of a pointer is the memory address of the pointed-to variable. A pointer type is declared by inserting an asterisk between the type and the variable declaration.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//x is an integer type&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//ptr is a pointer to an integer type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When using pointers, the asterisk is prepended to the pointer to operate on the pointed-to variable. This is referred to as “de-referencing” in pointer jargon. In order to assign a pointer to an existing non-pointer variable, the ampersand (&amp;amp;) is placed in front of the to-be-pointed-to variable. Ampersand in this context is read “address of”. It is known as the “referencing” operator. The program below shows examples of these operators.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//x is an integer&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//ptr is a ptr to an integer&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//ptr is assigned the &amp;quot;address of&amp;quot; x (ptr now &amp;quot;points&amp;quot; to x)&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assign 0 to x&lt;/span&gt;
     &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;500&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//This assigns 500 to the value that ptr points to (x in this case)&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x = %d, *ptr = %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;The address of x is 0x%X which is the same as ptr (0x%X)&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
          &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;ptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output of the above program is:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 500, *ptr &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The address of x is 0x10002FBC which is the same as ptr (0x10002FBC) In the program output, you will notice the actual value of the pointer makes no sense. This is because the value of the pointer is just a memory address that is managed by the OS and compiler. When the pointer is de-referenced, the value matches that of x.&lt;/p&gt;

&lt;h3 id=&quot;pointers_and_arrays_2&quot;&gt;Pointers and Arrays&lt;/h3&gt;

&lt;p&gt;As discussed before, arrays are lists of data. On an elemental level an array is actually a pointer with memory allocated when it is declared. The following example illustrates how an array is a pointer and can be used in the same way.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xlist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;8&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//pointer to an integer&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;xptr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xlist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//xptr points to the beginning of the list&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
          &lt;span class=&#39;c1&#39;&gt;//xptr and xlist hold the same value&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;xlist[%d] = %d and %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;],&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xlist&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]);&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//as xptr is incremented it goes through the values in xlist&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;*xptr = %d (value of xptr:0x%X)&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;xptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;xptr&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;xptr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program above has the following output.&lt;/p&gt;
&lt;pre&gt;
xlist[0] = 0 and 0
xlist[1] = 5 and 5
xlist[2] = 3 and 3
xlist[3] = 7 and 7
xlist[4] = 8 and 8
*xptr = 0 (value of xptr:0x10002FA8)
*xptr = 5 (value of xptr:0x10002FAC)
*xptr = 3 (value of xptr:0x10002FB0)
*xptr = 7 (value of xptr:0x10002FB4)
*xptr = 8 (value of xptr:0x10002FB8)
&lt;/pre&gt;
&lt;p&gt;There are a few important concepts to get from this program. The value of an array variable is actually the memory location of the first element. The bracket ([]) operators dereference from the beginning of the array based on the value in the brackets and the size of the element type, such as four for an int on a 32-bit processor. Likewise when a pointer is incremented, it increments by the size of the pointed-to-variable. Since xptr above points to type int, it is incremented by four bytes each time it is incremented. To make this point extra clear, assume xptr points to an int and sizeof(int) is equal to four, the statement xptr = xptr + 1 will increase the value of xptr by four which is the size of one int.&lt;/p&gt;

&lt;h3 id=&quot;pointers_and_strings&quot;&gt;Pointers and Strings&lt;/h3&gt;

&lt;p&gt;Strings are one of the most common usages of pointers (espcially for beginning programmers) in C. Strings can either be declared as an array of characters or a pointer to a character type. You can read or modify strings using either the pointer or array notation. A C string is always terminated with zero. This means an array of 16 bytes can hold a string that is 15 bytes long followed by a zero.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;16&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//string of up to 15 bytes&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;6&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;8&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;9&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;sc&#39;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//the terminating zero&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;My strings is:%s&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;my_string&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the program above, an array of char’s is declared. Any array of char’s that ends with a zero is a valid string in C. We also introduce the %s escape sequence, which is used to insert a string when using printf(). Additionally, the C standard library contains a string module with many commonly used string manipulation functions.&lt;/p&gt;

&lt;h2 id=&quot;pointers_and_structs&quot;&gt;Pointers and Struct’s&lt;/h2&gt;

&lt;p&gt;Pointers are also commonly used when a function has too many parameters to be practical. The parameters are defined in a struct then a pointer to the struct is passed to the function. This approach has the advantage of not using an excessive number of arguments, and it allows the function to read and write the data. The following program illustrates this concept.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xyzabc&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;many_parameters&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;few_parameters&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xyzabc&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xyzabc&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;result&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
     &lt;span class=&#39;n&#39;&gt;result&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;many_parameters&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;8&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;9&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;8&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;9&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;few_parameters&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;result&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;var1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
 
     &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;many_parameters&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;few_parameters&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;xyzabc&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;params&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;take_away&quot;&gt;Take Away&lt;/h3&gt;

&lt;p&gt;Arrays and pointers are powerful tools in C. Arrays store lists or matrices of data while pointers access the memory of a variable rather than the variable itself. Though pointers can be difficult to master; it is very important that new programmers take the time to learn them for two reasons. First, they are used a lot in the standard C library and through many available libraries. Second, they can cause problems (crashing) if used incorrectly.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Pointers-and-Arrays</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Pointers-and-Arrays</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Operators</title>
                <description>&lt;p&gt;Now that we have a basic understanding of the raw data types, let’s look at the operators. You are likely already familiar with many of the C operators (unless you are still in kindergarten). The most basic are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;multiply&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;/ divide&lt;/li&gt;

&lt;li&gt;% remainder&lt;/li&gt;

&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;add&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;subtract&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;\= assign value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are straightforward operators with three quirks: first, the order of operations is imperative; second, divide does not do any rounding; third, the operators may cause an overflow depending on the data type. The code below illustrates these operators and their quirks as well as introduces formatted number printing using printf().&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assign 5 to x&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//here printf is used to display z as a decimal (base 10 value)&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;1.  5*10+10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//the value of z replaces %d in the string&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;2.  5+10*10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;3.  5/10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;6&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;4.  5-6 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;13&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;5.  13 % 2 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output of the above program is:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;1.  5*10+10 is 60
2.  5+10*10 is 105
3.  5/10 is 0
4.  5-6 is 255
5.  13 % 2 is 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program output illustrates how these operators work.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The order of operations is first to multiply then to add: (5 x 10) + 10 is 60&lt;/li&gt;

&lt;li&gt;The order of operations again is to first multiply then add: 5+(10 x 10) is 105&lt;/li&gt;

&lt;li&gt;Because 5 divided by 10 is 0 with a remainder of 5 the value assigned to z is 0. No rounding is performed.&lt;/li&gt;

&lt;li&gt;Because z is an unsigned 8-bit number (0 to 255), assigning five minus six to it causes the number to overflow to 255 (see the diagram below).&lt;/li&gt;

&lt;li&gt;z is assigned the remainder of 13 divided by two. This operation is very handy for identifying even and odd numbers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lines one and two both illustrate the order of operations. The operations are generally executed from left to right with multiply and divide always happening before add and subtract. The assign operator (\=) has the lowest precedence and is executed last. Parentheses always override the default order of operations; for example, z=(x+y) times 10 will first add x and y then multiply the result by 10 and assign the value to z.&lt;/p&gt;

&lt;p&gt;overflow-diagram.png&lt;/p&gt;

&lt;h2 id=&quot;binary_operators&quot;&gt;Binary Operators&lt;/h2&gt;

&lt;p&gt;In addition to the easily recognizable operators, C has addition operators that are mostly based on binary number representation. In order to understand these operations, a cursory knowledge of binary numbers is required.&lt;/p&gt;

&lt;p&gt;A binary number uses just two symbols (0 and 1) to represent a value. This is why it is known as a base-2 numbering system. The classical number system most people are familiar with uses ten symbols (0 to 9) known as base-10 or decimal numbering. To understand binary, we need to take a closer look at the decimal system.&lt;/p&gt;

&lt;p&gt;When we count in the decimal system, we go through each of the ten symbols (usually skipping zero). When we hit the last symbol (the number 9), we go back to zero and add another column. Each symbol in the new column represents a number ten times greater than the last column. The counting below illustrates this:&lt;/p&gt;

&lt;p&gt;0, 1, 2 … 9, 10 (add a column and restart the symbols), … 98, 99, 100 (add a column and restart), 998, 999, 1000 (add a column and restart) If we recall learning to count, we learned the first column is known as the one’s column, then the ten’s column, etc. If we apply this logic to binary, where there are only two symbols, we count like this:&lt;/p&gt;

&lt;p&gt;0, 1, 10 (add a column and restart), 11, 100 (add a column and start over), 101, 110, 111, 1000 (add a column and restart) Instead of the one’s, ten’s and hundred’s column, each new column is just two times greater yieding the one’s, two’s, four’s, eight’s, and sixteen’s column. The table below shows binary numbers from 0 to 15.&lt;/p&gt;

&lt;p&gt;binary-count.png&lt;/p&gt;

&lt;p&gt;When looking at binary numbers, you can convert to decimal by adding the value of the column for the columns with a one. Take 12 for example. It is written 1100 in binary. The column values are 8-4-2-1. There are ones in the 8 column and the 4 column and 8+4 is equal to 12. For the binary number 7 (111), we add 4+2+1 to get 7.&lt;/p&gt;

&lt;p&gt;Armed with an understanding of binary numbers, the binary operators in C should come easily. The operators include “shift”, “and”, “or”, “xor”, and “not”. A shift comes in left and right varieties while the others can be either bit-wise or logical. The following code illustrates shifting.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this is a binary 00000101&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this mean shift x right one bit and assign to z&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;1.  5&amp;gt;&amp;gt;1 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//binary 00000010&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//shift y left 3 bits and assign to z&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;2.  2&amp;lt;&amp;lt;3 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//shifting also has to deal with overflow&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;128&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//shift x left 2 bits and assign to z&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;3.  128&amp;lt;&amp;lt;2 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above program produces the following output.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;1. 5&amp;gt;&amp;gt;1 is 2 
2. 2&lt;span class=&#39;s&#39;&gt;&amp;lt;&amp;lt;3 is 16 &lt;/span&gt;
&lt;span class=&#39;s&#39;&gt;3&lt;/span&gt;. 128&amp;lt;&amp;lt;2 is 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at the output above:&lt;/p&gt;

&lt;p&gt;Five (0101) shifted to the right drops the one’s column to get binary 2 (010). Shifting one bit to the right is the same thing as dividing by 2. This is analogous to decimal numbers. If you shift a decimal number to the right 1, you are dividing by 10. Likewise, shifting right 2 bits divides by 4 and shifting right 3 bits divides by 8 and so on. Two (010) becomes 16 (010000) when shifted to the left 3 bits. Since shift to the right is the same as dividing, shifting one bit to the left multiplies by 2; two bits multiplies by 4; three bits multiplies by 8; and so on. In this example, 2 shifted left 3 bits is equal to 2 times 8 or 16. If a bit is shifted out of the data type, it is dropped. 128 (10000000) shifted left one becomes zero because the bit shifts out of the 8 bits because z is a uint8_t. If z were a uint16_t, the new value for z would be 256.&lt;/p&gt;

&lt;p&gt;The next operators are the bit-wise and logical “or”, “and”, “xor”, and “not”. The bit-wise “or” operator is represented by | (it is the one on the same key as ). If any of the inputs are one, the output is one. The bit-wise “and” operator is represented by the &amp;amp; symbol. For each bit, if both input are one, then the output is one. If any of the input is zero, the output is zero. For “xor”, represented by ^, the output is one if exactly one input is one. A truth table is typically used to document the output of binary bit-wise operators. The following is the truth table for &amp;amp; where x and y are inputs and z is the output.&lt;/p&gt;

&lt;p&gt;binary-truth.png&lt;/p&gt;

&lt;p&gt;The bit-wise “not” operator is denoted in C using the ~. It only has one argument. The output changes all the zeros to ones and vice-versa.&lt;/p&gt;

&lt;p&gt;p The logical versions of “and”, “or”, and “not” assume the inputs are either zero or non-zero and output one or zero accordingly. The symbols are &amp;amp;&amp;amp;, || (two, consecutive vertical lines), and ! respectively. The code example below illustratres how to use these operators.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;  &lt;span class=&#39;c1&#39;&gt;//x and y are bit-wise and&amp;#39;ed then assigned to z&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;1.  5&amp;amp;amp;7 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;|&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//x and y are bit-wise or&amp;#39;ed then assigned to z&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;2.  5|7 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//z is the logical and of x and y&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;3.  0&amp;amp;amp;&amp;amp;amp;10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;||&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//z is the logical and of x and y&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;4.  0||10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;5.  z is %d !z is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output of the above program is:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;1.  5&lt;span class=&#39;p&#39;&gt;&amp;amp;&lt;/span&gt;7 is 5
2.  5&lt;span class=&#39;p&#39;&gt;|&lt;/span&gt;7 is 7
3.  0&lt;span class=&#39;o&#39;&gt;&amp;amp;&amp;amp;&lt;/span&gt;10 is 0
4.  0&lt;span class=&#39;o&#39;&gt;||&lt;/span&gt;10 is 1
5.  z is 1 !z is 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;this_is_a_bitwise_and_of_0b00000101_5_and_0b00000111_7_since_bits_0_and_2_are_one_in_both_input_values_they_are_both_one_in_the_output_value_of_0b00000101_5&quot;&gt;This is a bitwise “and” of 0b00000101 (5) and 0b00000111 (7). Since bits 0 and 2 are one in both input values, they are both one in the output value of 0b00000101 (5).&lt;/h1&gt;

&lt;h1 id=&quot;for_the_bitwise_or_of_0b00000101_5_as_well_as_0b00000111_7_the_output_is_0b00000111_because_these_bits_are_set_in_either_of_the_inputs&quot;&gt;For the bitwise “or” of 0b00000101 (5) as well as 0b00000111 (7), the output is 0b00000111 because these bits are set in either of the inputs.&lt;/h1&gt;

&lt;h1 id=&quot;for_the_logical_and_operation_the_output_is_always_zero_or_one_the_inputs_are_considered_nonzero_or_zero_a_nonzero_input_acts_as_a_one_where_a_zero_input_acts_as_a_zero____since_x_is_zero_the_output_is_zero&quot;&gt;For the logical “and” operation, the output is always zero or one. The inputs are considered non-zero or zero. A non-zero input acts as a one where a zero input acts as a zero. # # # Since x is zero, the output is zero.&lt;/h1&gt;

&lt;h1 id=&quot;the_logical_or_treats_the_inputs_in_the_same_manner_as_the_logical_and_but_outputs_a_one_because_y_is_a_nonzero_input&quot;&gt;The logical “or” treats the inputs in the same manner as the logical “and” but outputs a one because y is a non-zero input.&lt;/h1&gt;

&lt;p&gt;For logical “not”, the output is zero if the input is non-zero; the opposite is also true.&lt;/p&gt;

&lt;h2 id=&quot;comparison_operators&quot;&gt;Comparison Operators&lt;/h2&gt;

&lt;p&gt;We are going back to some basic operators with which you are already familiar. These operators (like logical “and”/”or”) only output a one or a zero. They are typically used in program flow control, which is covered later, rather than just doing math. Here are the operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;\== is one if the two arguments are equal; zero otherwise&lt;/li&gt;

&lt;li&gt;Note that a single equal sign (=) is an assignment operator and a double equal sign (==) is a comparison.&lt;/li&gt;

&lt;li&gt;&amp;gt; is one if the left argument is greater than the right&lt;/li&gt;

&lt;li&gt;&amp;gt;= is one if the left argument is greater than or equal to the right&lt;/li&gt;

&lt;li&gt;\&amp;lt; is one if the left argument is less than the right&lt;/li&gt;

&lt;li&gt;\&amp;lt;= is one if the left argument is less than or equal to the right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following program demonstrates how these work.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;w&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;w&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assigns 5 to w&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assigns 5 to x&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assigns 10 to y&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//if x is equal to y, z is assigned one otherwise z is assigned zero&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;1.  5==10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;w&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//if x is equal to w, z is assigned one otherwise z is assigned zero&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;2.  5==5 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//if x is greater than y, z is assigned one otherwise z is assigned zero&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;3.  5&amp;gt;10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//if x is less than y, z is assigned one otherwise z is assigned zero&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;4.  5&amp;lt;10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;w&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//if x is less than/equal to w, z is assigned one otherwise z is assigned zero&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;5.  5&amp;lt;=5 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;w&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//if w is greater than/equal to y, z is assigned one otherwise z is assigned zero&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;6.  5&amp;gt;=10 is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output of the program is:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;1.  &lt;span class=&#39;nv&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;==&lt;/span&gt;10 is 0
2.  &lt;span class=&#39;nv&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;==&lt;/span&gt;5 is 1
3.  5&amp;gt;10 is 0
4.  5&amp;lt;10 is 1
5.  5&amp;lt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;5 is 1
6.  5&amp;gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;10 is 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These operators should be pretty straightforward. There is one thing to remember. It is bad practice to use == with a floating point value. It is better to bound the range using something like&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 
&lt;span class=&#39;p&#39;&gt;((&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mf&#39;&gt;2.0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mf&#39;&gt;4.0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how the logical “and” is used in conjuction with the other operators. Combining operators is really where these become powerful tools to programmers.&lt;/p&gt;

&lt;h2 id=&quot;combining_operators&quot;&gt;Combining Operators&lt;/h2&gt;

&lt;p&gt;When combining operators, the order of execution is critical for getting the desired result. The order of operations is mentioned briefly above in the *\/ and +- section and is equally important for the binary and comparison operators.&lt;/p&gt;

&lt;p&gt;When combining operators, things can get confusing when trying to deduce the order of operations. It is good programming practice to use copious amount of parentheses to make things clear both to you and to future maintainers of your code. The program below illustrates both good and bad use of parentheses when combining operators.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;15&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//Here is a bad example because we rely soley on order of operations&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
       &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;The bad example is true&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//Here is a better example that uses parentheses&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
       &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;This is a better example&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;c1&#39;&gt;//This example furthe clarifies but may be onrous to program&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;((&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;((&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;This example leaves no room for error&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;shortcut_operators&quot;&gt;Shortcut Operators&lt;/h2&gt;

&lt;p&gt;The C language provides a number of shorthand ways to do some operations. One of the most common is ++ which increments a variable.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x is now %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above demonstrates both post-increment and pre-increment short cuts. It outputs:&lt;/p&gt;

&lt;h1 id=&quot;x_is_0&quot;&gt;x is 0&lt;/h1&gt;

&lt;h1 id=&quot;x_is_now_2&quot;&gt;x is now 2&lt;/h1&gt;

&lt;p&gt;The x++ statement increments x after its value is passed to the printf() function while ++x increments the variable before it is passed to printf().&lt;/p&gt;

&lt;p&gt;Here is the full list of shortcuts plus their equivalents:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;bash&#39;&gt;* x++ &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;post-increment&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x + 1
* ++x &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;pre-increment&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x + 1
* post/pre increment have different rules &lt;span class=&#39;k&#39;&gt;for &lt;/span&gt;the order of operations
* x-- equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x - 1
* --x equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x - 1
* x+&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x + y
* x-&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x - y
* x*&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x * y
* x/&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x / y
* x%&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x % y
* x&lt;span class=&#39;p&#39;&gt;|&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x &lt;span class=&#39;p&#39;&gt;|&lt;/span&gt; y
* x&lt;span class=&#39;p&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x &lt;span class=&#39;p&#39;&gt;&amp;amp;&lt;/span&gt; y
* x^&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x ^ y
* x&amp;gt;&amp;gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x &amp;gt;&amp;gt; y
* x&amp;lt;&amp;lt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;y equivalent to &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; x &amp;lt;&amp;lt; y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;take_away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;The C language includes many mathematical operators for doing basic arithmetic, comparisons, and binary operations. The order of operations is critical in C for correctly evaluating expressions. Sometimes understanding this order can be difficult when skimming through code, but adding parentheses can help to make code easier to read and avoid unintended evaluation orders.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Operators</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Operators</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Keywords Reference</title>
                <description>&lt;p&gt;This tutorial (part of the embedded C tutorial) is a list of the C keywords for reference.&lt;/p&gt;

&lt;h3 id=&quot;data_types&quot;&gt;Data Types&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;char&lt;/li&gt;

&lt;li&gt;int&lt;/li&gt;

&lt;li&gt;long&lt;/li&gt;

&lt;li&gt;float&lt;/li&gt;

&lt;li&gt;double&lt;/li&gt;

&lt;li&gt;_Bool&lt;/li&gt;

&lt;li&gt;void&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data_type_modifiers&quot;&gt;Data Type Modifiers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;unsigned&lt;/li&gt;

&lt;li&gt;const&lt;/li&gt;

&lt;li&gt;static&lt;/li&gt;

&lt;li&gt;volatile&lt;/li&gt;

&lt;li&gt;extern&lt;/li&gt;

&lt;li&gt;restrict&lt;/li&gt;

&lt;li&gt;inline&lt;/li&gt;

&lt;li&gt;auto&lt;/li&gt;

&lt;li&gt;register&lt;/li&gt;

&lt;li&gt;_Complex&lt;/li&gt;

&lt;li&gt;_Imaginary&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compound_data_types&quot;&gt;Compound Data Types&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;struct&lt;/li&gt;

&lt;li&gt;enum&lt;/li&gt;

&lt;li&gt;union&lt;/li&gt;

&lt;li&gt;typedef&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flow_control&quot;&gt;Flow Control&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;if&lt;/li&gt;

&lt;li&gt;else&lt;/li&gt;

&lt;li&gt;switch&lt;/li&gt;

&lt;li&gt;case&lt;/li&gt;

&lt;li&gt;default&lt;/li&gt;

&lt;li&gt;goto&lt;/li&gt;

&lt;li&gt;break&lt;/li&gt;

&lt;li&gt;for&lt;/li&gt;

&lt;li&gt;do&lt;/li&gt;

&lt;li&gt;while&lt;/li&gt;

&lt;li&gt;continue&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;utility&quot;&gt;Utility&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;sizeof&lt;/li&gt;
&lt;/ul&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Keyword-Reference</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Keyword-Reference</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Functions</title>
                <description>&lt;p&gt;A function is a collection of C statements that can be utilized many times throughout a program or packaged into a module and re-used throughout many programs. The anatomy of a C function includes the prototype, the return type, the parameters, the name, and the body. Here is an example:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;my_first_function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this is the prototype&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;w&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;w&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;my_first_function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;w&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;z is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//this is the type (int), name, and parameters (x and y) of the function&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;my_first_function&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//Inside the curly brackets is the function body&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;sum&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;sum&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;sum&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//tells the compiler to return the int x+y to the caller&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above demonstrates my_first_function(). The prototype is always the return type, name, and parameters followed by a semi-colon. In most cases, the prototype is part of a header file so that the function can be used in many different source files. This is the case for printf() whose prototype is part of the stdio.h header file. The compiler gives a warning if a function is used, but a prototype is not found. It is important for the compiler to know function prototypes so that it can verify the number and types of the parameters passed to a function are compatible. It also checks that the return type is used correctly.&lt;/p&gt;

&lt;h2 id=&quot;name&quot;&gt;Name&lt;/h2&gt;

&lt;p&gt;The name of the function must be a valid C identifier. By convention, user-defined identifiers should not start with an underscore. It is good practice to use descriptive identifiers. Actually, my_first_function() is a poor name because it does not inform the programmer what the function does. A better name is add_xy() because the function returns the sum of the two parameters.&lt;/p&gt;

&lt;p&gt;%{color:note}Valid C identifiers must start with a letter or underscore and be composed of case-sensitive letters, numbers, and underscores as well as not be a C keyword.%&lt;/p&gt;

&lt;h2 id=&quot;parameters&quot;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;The naming rules for parameters are the same for functions in that they must be C identifiers. A function can have any number of parameters passed to it of any type. The example above has two parameters of type int. Within the body of a function, a parameter acts as a local variable. It can be both read and written. However, any changes to the parameters are lost when the function returns. In the example above, the variable w within main() is not affected by the x = 0 statement within my_first_function() because a copy of w is passed to the function rather than w itself.&lt;/p&gt;

&lt;h2 id=&quot;body&quot;&gt;Body&lt;/h2&gt;

&lt;p&gt;The body of a function includes any number of C statements (separted by semicolons) within curly brackets. The return keyword is used to exit the function. If the return type is void, using return is optional. Also, return does not have to come at the end of the function. A function may conditionally return before it reaches the end. Here are a few examples to illustrate using return.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;print_output&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;Output is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//because the return type is void, return is optional here&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;sum_abc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
          &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//conditionally return early if a is less than 0&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//return the sum (as an int)&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;take_away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;A function is a primary building block in C. A function consists of a prototype, name, return type, parameters, and body. The function name as well as the parameters must be valid C identifiers consisting only of letters, numbers, and underscores. They cannot start with a number and should not start with an underscore. As a programmer, you will create, use, and re-use many, many functions.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Functions</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Functions</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Flow Control</title>
                <description>&lt;p&gt;The typical C program executes one statement after the next. Various mechanisms exist to vary the flow of the program in order to conditionally execute some statements while executing others over and over within a looThe C flow control keywords include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if, else&lt;/li&gt;

&lt;li&gt;switch, case&lt;/li&gt;

&lt;li&gt;default&lt;/li&gt;

&lt;li&gt;goto, label&lt;/li&gt;

&lt;li&gt;do, while, or for&lt;/li&gt;

&lt;li&gt;break, continue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first three groups are associated with conditional execution while the last group is used to execute the same group of statements within a loop.&lt;/p&gt;

&lt;h2 id=&quot;if_else&quot;&gt;If, Else&lt;/h2&gt;

&lt;p&gt;The if and else keywords allow you to conditionally execute a group of statements based on certain conditions. The syntax includes the if keyword followed by an expression in parentheses and a statement to execute. If the statement includes multiple statements, curly brackets are used. Here is an example:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x is equal to 5&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//OR&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x is equal to 5&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x is NOT equal to 5&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first if clause will print “x is equal to 5” if the variable x is equal to five. Otherwise, it will not output anything. The second if clause appends a statement to execute if x is not equal to five. The else portion of an if clause is always optional. If you are only executing one statement within an if clause, the curly brackets ({}) are also optional. Though, many programmers always include them to make the code more readable and to avoid ambiguous situations. Here are a few more examples.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x is greater than 5&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//there is a pitfall to omitting {}, it can create ambiguity with compound if statements&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x is greater than 5 and x less than 10&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
          &lt;span class=&#39;nf&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;x is not less than 10 but it might be greater than 5&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the snippet above, it is not clear whether the else statement is attached to the first or second if statement. Using the curly brackets fixes the ambiguity.&lt;/p&gt;

&lt;p&gt;The above examples are simple, but if statements can be rather complex. Any combination of symbols and operators can be used.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;((&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;c1&#39;&gt;//sometimes logical and/or are separated on a newline for clarity&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;amp&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;((&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;switch_case&quot;&gt;Switch, Case&lt;/h2&gt;

&lt;p&gt;The switch/case flow control structure is designed to allow the user to execute a statement based on the value of an integer type variable. It is a shorthand version of a series of if, else statements which might look something like the following example.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//case 0&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//case 1&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//case 2&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt; 
     &lt;span class=&#39;c1&#39;&gt;//case 10&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//default&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The equivalent code using switch and case is:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;k&#39;&gt;switch&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;:
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;break&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;:
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;break&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;:
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;break&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;:
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;break&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;nl&#39;&gt;default:&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The break keyword is used to exit the switch context. Many times it is present at the end of each case. However, break can be omitted if the same statement is to be executed for multiple cases.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;k&#39;&gt;switch&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;:
     &lt;span class=&#39;c1&#39;&gt;//statement for 0&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;:
     &lt;span class=&#39;c1&#39;&gt;//statement for 0 and 1&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;break&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;:
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;:
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;4&lt;/span&gt;:
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;:
     &lt;span class=&#39;c1&#39;&gt;//statement for 2, 3, 4, and 5&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;break&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;:
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;break&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;nl&#39;&gt;default:&lt;/span&gt;
     &lt;span class=&#39;c1&#39;&gt;//statement&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;goto_label&quot;&gt;Goto, Label&lt;/h2&gt;

&lt;p&gt;The goto keyword is used to jump to another location in a program. The concept of the goto keyword has its root in assembly language which uses branches and jumps to move around the order of execution. However, the use of goto in C is somewhat taboo because it makes a program difficult to maintain and understand. Nonetheless, here is an example of using it.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;amp;amp;gt.h&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;start here&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;goto&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;the_end&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;skip over this part&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
 
     &lt;span class=&#39;nl&#39;&gt;the_end:&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//this is the label, it is following by a colon like case labels&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;the end&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;for_loop&quot;&gt;For Loop&lt;/h2&gt;

&lt;p&gt;While if/else and switch/case allow conditional execution of codes, loops allows the same code to be executed many times. C has two types of loops: for loops and while loops. The for loop includes an initial statement, a test statement, and an increment statement. The following is an example of using a for loop in a program.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;amp;amp;gt.h&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;){&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//intial; test; incremental&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;i is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The initial statement is execute before the loop is entered. The increment statement executes when the loop completes. The condition statement executes before the loop restarts. If the condition statement is a non-zero value, the loop continues executing. The following example should clear up any conclusion:&lt;/p&gt;

&lt;p&gt;The output of the above program is shown below&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The loop in the above example executes five times. Once i is equal to five, the condition statement evaluates to zero, and the loop terminates.&lt;/p&gt;

&lt;h2 id=&quot;while_loops&quot;&gt;While Loops&lt;/h2&gt;

&lt;p&gt;While loops execute as long as a condition is true. They can take on two formats known as the while loop and the do/while looEach loop type is shown in the following program.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;amp;amp;gt.h&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;while loop:&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;while&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;  &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;){&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;i is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;do/while loop&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;i is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
          &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;while&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main difference between while and do/while is that the do/while loop will always execute at least once because the condition statement is not checked until the body statements have already been executed. Conversely, the while loop executes the condition statement before the body statements and can execute zero times if the condition statement is initially false.&lt;/p&gt;

&lt;p&gt;Here is the output of the above program.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt; 		
&lt;span class=&#39;k&#39;&gt;while&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loop&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;4&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;while&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loop&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;2&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;3&lt;/span&gt;
&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;is&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the output of the while and do/while loops is identical to the output of the for loop in the previous example.&lt;/p&gt;

&lt;h2 id=&quot;take_away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;Flow control in C programs is broken down to conditions and loops. C’s if/else clauses and switch/case clauses are the main tools for conditionally executing statements in C. Two mechanisms are available for loops: the for loop and the while loop.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Flow-Control</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Flow-Control</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Compound Data Types</title>
                <description>&lt;p&gt;The C languages defines several types of compound data structures. The structures treat the data differently when stored in memory. The following compound data types exist.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;struct: data in a struct is allocated contiguously in memory&lt;/li&gt;

&lt;li&gt;union: data in a union occupy the same memory location&lt;/li&gt;

&lt;li&gt;enum: this is a list of valid values for the specified type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C also provides two important tools for programmers that allow them to define new data types (using typedef) and check the size of existing types (using sizeof).&lt;/p&gt;

&lt;h3 id=&quot;struct&quot;&gt;struct&lt;/h3&gt;

&lt;p&gt;Of these types the struct is the most commonly used. In programming design, related data is combined in a struct. The C language, per se, does not define any struct’s. However, the C standard library defines a number of them. A good example of this is struct tm which is the data structure for storing calendar time. The following code segment shows how the structure is defined (part of the time.h header).&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_sec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_min&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_hour&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_mday&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_mon&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_year&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_wday&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_yday&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm_isdst&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The program below shows how to access (read and write) members of a struct using the period (.) syntax to access members.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;time.h&amp;gt;  &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//&amp;quot;struct tm&amp;quot; is defined here &lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt; 
     &lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;tm&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//declare t as a struct tm &lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tm_sec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;30&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assign 30 to the tm_sec member &lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tm_min&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assign 5 to the tm_min member &lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tm_hour&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//assign 10 to the tm_hour member &lt;/span&gt;
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;time is %d:%d:%d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tm_hour&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tm_min&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tm_sec&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program ouputs:&lt;/p&gt;
&lt;pre&gt;
time is 10:5:30
union
&lt;/pre&gt;
&lt;p&gt;The syntax for union is similar to that of struct. However, the memory allocation for a union is very different. For a struct, each member is assigned a unique location in memory, but all members of a union share the same memory location. The size of the union in memory is at least large enough to hold the largest member.&lt;/p&gt;

&lt;h3 id=&quot;enum&quot;&gt;enum&lt;/h3&gt;

&lt;p&gt;An enum is a list of values that should be assigned to a variable. An enum variable occupies enough memory to hold the largest value of the enum and has values rather than members (unlike union and struct). Using enum is equivalent to using an integer type large enough to hold all enum values. The compiler does not ensure that values assigned to enum types are in the list.&lt;/p&gt;

&lt;h2 id=&quot;combining_compound_data_types&quot;&gt;Combining Compound Data Types&lt;/h2&gt;

&lt;p&gt;Compound data types (specifically, unions and structs) can be combined in various ways. There can be unions within structs, vice versa, and almost any other combination. The following code shows a couple of examples.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;point&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; 
     &lt;span class=&#39;c1&#39;&gt;//This structure has location and color data &lt;/span&gt;
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;k&#39;&gt;union&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;color_union&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//The color data can be accesses as elements or one number               struct rgb_struct { &lt;/span&gt;
                &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;r&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//red element &lt;/span&gt;
                &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;g&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//green element &lt;/span&gt;
                &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//blue element &lt;/span&gt;
                &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alpha&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//transparency element &lt;/span&gt;
          &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rgb&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
          &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rgba&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//rgb and transparency elements &lt;/span&gt;
     &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;color&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt; 
 
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt; 
     &lt;span class=&#39;k&#39;&gt;struct&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;point&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;500&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;color&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rgb&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;r&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;255&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;color&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rgb&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;color&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rgb&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;color&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rgb&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;alpha&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;8&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;%d,%d,%d %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;p0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;color&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rgba&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
     &lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt; 
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, there is a struct within a union within a struct. When p0 is assigned memory, it has the following layout assuming int is four bytes:&lt;/p&gt;

&lt;p&gt;p=. !{width:40%}p0-memory-layout.png!&lt;/p&gt;

&lt;h3 id=&quot;type_definitions&quot;&gt;Type Definitions&lt;/h3&gt;

&lt;p&gt;Users (C Programmers) can define types using any raw or compound data type as well as previously defined user types. The stdint.h header is a good example of user-defined types using purely raw data types. The code snippet below shows a partial, simplied implemenation of stdint.h on a 32-bit processor.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#ifndef _STDINT_H  &lt;/span&gt;&lt;span class=&#39;c1&#39;&gt;//this is the header guard&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#define _STDINT_H&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;unsigned&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;uint32_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;signed&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int32_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;unsigned&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;signed&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int8_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;unsigned&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;short&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;uint16_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;typedef&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;signed&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;short&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int16_t&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since this is a header file, the first thing is the header guard as mentioned in the preprocessor directives lesson. Next, the typedef keyword is introduced which defines a new data type than can be declared just like any other data type. The example then uses raw types to define the C99 integers in stdint.h. The code below illustrates the use of these types alongside raw types; it also introduces a new C keyword: sizeof.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;cpp&#39;&gt;&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdio.h&amp;gt;  &lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#include &amp;lt;stdint.h&lt;/span&gt;
&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;argv&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[]){&lt;/span&gt; 
	&lt;span class=&#39;kt&#39;&gt;unsigned&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;char&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;uint8_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//x and y are the same type on most processors &lt;/span&gt;
	&lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;w&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; 
	&lt;span class=&#39;kt&#39;&gt;int32_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;//show the sizes (number of bytes in memory) used by each variable &lt;/span&gt;
	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;sizeof(x) is %d, sizeof(y) is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;sizeof&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;sizeof&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt; 
	&lt;span class=&#39;n&#39;&gt;printf&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;sizeof(w) is %d, sizeof(z) is %d&lt;/span&gt;&lt;span class=&#39;se&#39;&gt;\n&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;sizeof&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;w&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;sizeof&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt; 
	&lt;span class=&#39;n&#39;&gt;exit&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As shown, uint8_t can be used just like unsigned char after the typedef unsigned char uint8_t line which is located in stdint.h. The program has the following output showing that the uint8_t/unsigned char types use one byte in memory while the int32_t/int types use four bytes in memory.&lt;/p&gt;
&lt;pre&gt;
sizeof(x) is 1, sizeof(y) is 1
sizeof(w) is 4, sizeof(z) is 4
&lt;/pre&gt;
&lt;p&gt;The sizeof keyword can operate both on types and variables. The example above uses the variable, for example sizeof(x). But it is also OK to use sizeof(unsigned char). The sizeof keyword is especially useful with structs. For the calendar time struct mentioned above, we use sizeof(struct tm). This notation is used when the struct has not been defined as a type using typedef.&lt;/p&gt;

&lt;h2 id=&quot;take_away&quot;&gt;Take Away&lt;/h2&gt;

&lt;p&gt;Compound data types in C give the programmer a powerful set of tools for organizing data. The C struct is the most common compound data type and organizes data contiguously in memory. A union allows the same place in memory to be treated as different types. An enum defines a list of values but acts more like a macro (see #define) than a compound data type. Users can also create customized types using the typedef keyword. Finally, the sizeof keyword determines the amount of memory used by a variable or type.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Compound-Data-Types</link>
                <guid>http://Coactionos.github.io/c-tutorial/2013/12/14/Embedded-C-Tutorial-Compound-Data-Types</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>

        <item>
                <title>Controlling a Solenoid</title>
                <description>&lt;p&gt;&lt;img class=&#39;post_image&#39; src=&#39;/images/solenoid-ckt.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Many products use solenoids to open and close valves. A microcontroller can control solenoids programmatically using a GPIO pin and a simple circuit.&lt;/p&gt;

&lt;h2 id=&quot;circuit&quot;&gt;Circuit&lt;/h2&gt;

&lt;p&gt;A solenoid can be enabled using a simple transistor circuit and a microcontroller. The circuit above shows a solenoid, MOSFET transistor, diode, and a microcontroller GPIO signal. To activate the solenoid, the microcontroller GPIO signal goes high causing the MOSFET to turn on. When on, the MOSFET allows current to flow from the power supply through the solenoid and to ground. The voltage rating for the solenoid dictates the voltage of the power supply (it is OK if the power supply voltage is different from the microcontroller voltage). The MOSFET should be selected to handle sufficient current to activate the solenoid as specified in the solenoid’s datasheet.&lt;/p&gt;

&lt;p&gt;Because the solenoid is an inductive device, the diode is added to protect the MOSFET. When the solenoid turns off, the current through the solenoid rapidly drops from the nominal value to zero. Since the voltage drop across the solenoid is proportional to the change in current (see equation below), the current drop creates a voltage spike which can damage the MOSFET. The diode prevents the voltage spike from reaching damaging levels by directing the current back to the power supply.&lt;/p&gt;

&lt;p&gt;!formula1.png!&lt;/p&gt;

&lt;h2 id=&quot;firmware_considerations&quot;&gt;Firmware Considerations&lt;/h2&gt;

&lt;p&gt;Controlling the solenoid in firmware is a straightforward operation with one exception. As mentioned, driving the GPIO high will turn the solenoid on, while driving it low will turn it off. However, there is a small amount of time while the microcontroller starts up where the solenoid may open unexpectedly. For example, if the default GPIO configuration is to have an internal pull-up activated, the solenoid will be activated while the microcontroller is starting u To avoid this behavior, an external pull-down resistor can be added to the GPIO line (shown below) to ensure the solenoid stays off during microcontroller initialization.&lt;/p&gt;

&lt;p&gt;!{width:40%}solenoid-pulldown-ckt.png!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Controlling solenoids with microcontrollers is simple. Remember to ensure the MOSFET has sufficient current capability to activate the solenoid, include the protection diode to prevent the solenoid from damaging the MOSFET, and include a pull-down resistor on the GPIO line if the microcontroller doesn’t drive the line low at startup.&lt;/p&gt;</description>
                <link>http://Coactionos.github.io/embedded/2013/12/14/Controlling-a-Solenoid</link>
                <guid>http://Coactionos.github.io/embedded/2013/12/14/Controlling-a-Solenoid</guid>
                <pubDate>2013-12-14T00:00:00-07:00</pubDate>
        </item>


</channel>
</rss>
