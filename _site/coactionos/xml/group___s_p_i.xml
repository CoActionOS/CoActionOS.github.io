<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group___s_p_i" kind="group">
    <compoundname>SPI</compoundname>
    <title>Serial Peripheral Interface (SPI) Master</title>
    <innerfile refid="spi_8h">spi.h</innerfile>
    <innerclass refid="structspi__attr__t" prot="public">spi_attr_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___s_p_i_1gaba01db17f4a2bfbc3db60dc172972a25" prot="public" static="no">
        <name>@15</name>
        <enumvalue id="group___s_p_i_1ggaba01db17f4a2bfbc3db60dc172972a25a925f70e60e25311cab69bdd17751dad2" prot="public">
          <name>SPI_ATTR_MODE0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI Mode 0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggaba01db17f4a2bfbc3db60dc172972a25a2ab2ff89b36b85669b92107e6ad34be8" prot="public">
          <name>SPI_ATTR_MODE1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI Mode 1 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggaba01db17f4a2bfbc3db60dc172972a25a6d73e87183fc02e7da42175fa44f665d" prot="public">
          <name>SPI_ATTR_MODE2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI Mode 2 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggaba01db17f4a2bfbc3db60dc172972a25a2174a55e6163a71cbdb385461666376d" prot="public">
          <name>SPI_ATTR_MODE3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI Mode 3 </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This lists the valid SPI mode types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="109" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1gaaf105ae5beaca1dee30ae54530691fce" prot="public" static="no">
        <name>@16</name>
        <enumvalue id="group___s_p_i_1ggaaf105ae5beaca1dee30ae54530691fcead49c166c5feaf65c09e37436e5617404" prot="public">
          <name>SPI_ATTR_FORMAT_SPI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI Format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggaaf105ae5beaca1dee30ae54530691fcea40e286f8948f9fbde964e42c67941398" prot="public">
          <name>SPI_ATTR_FORMAT_TI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TI Format </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggaaf105ae5beaca1dee30ae54530691fcea7e042162d6a2937d41b77a7dad80e72a" prot="public">
          <name>SPI_ATTR_FORMAT_MICROWIRE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Microwire Format </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="128" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="128" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___s_p_i_1gaab3a431331da819f6c36bcc03111045d" prot="public" static="no">
        <type><ref refid="structhwpl__action__t" kindref="compound">hwpl_action_t</ref></type>
        <definition>typedef hwpl_action_t spi_action_t</definition>
        <argsstring></argsstring>
        <name>spi_action_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="148" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___s_p_i_1gae65e7c02a8bb2ce1fd78daf026daa421" prot="public" static="no">
        <name>SPI_IOC_IDENT_CHAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="104" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1ga6faa4977e39f942b86a645da384e5583" prot="public" static="no">
        <name>SPI_ATTR_MASTER</name>
        <briefdescription>
<para>This specifies the attribute master value for SPI master. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="119" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1gac1457e15fdf08e9acf8d795988a21766" prot="public" static="no">
        <name>SPI_ATTR_SLAVE</name>
        <briefdescription>
<para>This specifies the attribute master value for SPI slave. This value can&apos;t be used with spi_ioctl(). It must be used with spi_slave_ioctl(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="126" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1gaae98e7ee7daf758e6b5df7dba87c9d04" prot="public" static="no">
        <name>I_SPI_GETATTR</name>
        <briefdescription>
<para>This request gets the SPI attributes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="153" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1ga3c48de01f44d809e504b02d420ce66e2" prot="public" static="no">
        <name>I_SPI_SETATTR</name>
        <briefdescription>
<para>This request sets the SPI attributes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="157" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1ga0516f8e5912f8064d6f3102e951dfe8a" prot="public" static="no">
        <name>I_SPI_SETACTION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="158" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1gab641415ca6596d88617661aaf2457739" prot="public" static="no">
        <name>I_SPI_SWAP</name>
        <briefdescription>
<para>See details below. </para>        </briefdescription>
        <detaileddescription>
<para>This tells the SPI bus to get a swap a byte from the bus. spi_ioctl() returns the word read from the bus; The ctl argument to spi_ioctl() is the word to put (not a pointer to <ref refid="structspi__attr__t" kindref="compound">spi_attr_t</ref>).</para><para>The following example puts 0xAC on the bus and stores whatever is read from the bus in swapped_word. <programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swapped_word;</highlight></codeline>
<codeline><highlight class="normal">swapped_word<sp/>=<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(spi_fd,<sp/><ref refid="group___s_p_i_1gab641415ca6596d88617661aaf2457739" kindref="member">I_SPI_SWAP</ref>,<sp/>0xAC);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="176" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1ga889b7810c9c1f1bae770b150227fcd97" prot="public" static="no">
        <name>I_SPI_SETDUPLEX</name>
        <briefdescription>
<para>See details below. </para>        </briefdescription>
        <detaileddescription>
<para>This tells the SPI bus to perform full or half duplex operations. The ctl argument to spi_ioctl() is the pointer to the buffer where the duplex memory is stored. If the ctl argument is NULL, half duplex operation is enabled. Otherwise, reads and writes are full duplex. For example, on <ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaefe7609d91407014d94611912cc2b1a3" kindref="member">read()</ref> operations, the SPI bus will be written with the contents of the duplex pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="188" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1ga877716426f25ca4128ac733982861d32" prot="public" static="no">
        <name>I_SPI_SET_DUPLEX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="189" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1ga3d330da96b77c8533d86b7abc27d1aa2" prot="public" static="no">
        <name>I_SPI_TOTAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" line="191" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/spi.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module implements a hardware SPI master. The chip select functionality is not part of this module and must be implemented separately. This allows the application to use the SPI bus to access multiple devices. More information about accessing peripheral IO is in the <ref refid="group___p_e_r_i_p_h_i_o" kindref="compound">Peripheral Input/Output</ref> section.</para><para>The following is an example of how to read/write the SPI in an OS environment:</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hwpl_8h" kindref="compound">hwpl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_write_spi(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structspi__attr__t" kindref="compound">spi_attr_t</ref><sp/>attr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[16];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>duplex_buffer[16];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fd<sp/>=<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gac843f2e35e60c3bbf1da47d84306f29b" kindref="member">open</ref>(</highlight><highlight class="stringliteral">&quot;/dev/spi0&quot;</highlight><highlight class="normal">,<sp/>O_RDWR);<sp/></highlight><highlight class="comment">//Here<sp/>O_RDWR<sp/>could<sp/>be<sp/>OR&apos;d<sp/>with<sp/>O_NONBLOCK<sp/>for<sp/>non<sp/>blocking<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fd<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>opening<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structspi__attr__t_1aebbfa7c7f066e32d060388fd02bb77e1" kindref="member">bitrate</ref><sp/>=<sp/>1000000;<sp/></highlight><highlight class="comment">//1MHz<sp/>bitrate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structspi__attr__t_1af3dc7209ee970bc6b5bef3d58e237738" kindref="member">format</ref><sp/>=<sp/><ref refid="group___s_p_i_1ggaaf105ae5beaca1dee30ae54530691fcead49c166c5feaf65c09e37436e5617404" kindref="member">SPI_ATTR_FORMAT_SPI</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structspi__attr__t_1a5dc90bfc713043bd421210089f8bd0f2" kindref="member">pin_assign</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//Use<sp/>GPIO<sp/>configuration<sp/>zero<sp/>(see<sp/>device<sp/>specific<sp/>documentation<sp/>for<sp/>details)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structspi__attr__t_1aa1d803475d2c60b022f8972941148cf7" kindref="member">master</ref><sp/>=<sp/><ref refid="group___s_p_i_1ga6faa4977e39f942b86a645da384e5583" kindref="member">SPI_ATTR_MASTER</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structspi__attr__t_1a13f07dd7e9f0e14f7c122b3806b734c5" kindref="member">mode</ref><sp/>=<sp/><ref refid="group___s_p_i_1ggaba01db17f4a2bfbc3db60dc172972a25a925f70e60e25311cab69bdd17751dad2" kindref="member">SPI_ATTR_MODE0</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structspi__attr__t_1ab7b92f9582bac94e6c2f87f4a859e385" kindref="member">width</ref><sp/>=<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(fd,<sp/>I_SETATTR,<sp/>&amp;attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>peripheral<sp/>configuration<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>read<sp/>or<sp/>write<sp/>the<sp/>SPI<sp/>in<sp/>half<sp/>duplex<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;1/2<sp/>Duplex<sp/>Test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gadd30ddeed4bdbf3c96fa36970c1ca778" kindref="member">write</ref>(fd,<sp/>buffer,<sp/>strlen(buffer)<sp/>&lt;<sp/>0<sp/>){<sp/></highlight><highlight class="comment">//returns<sp/>after<sp/>all<sp/>bytes<sp/>have<sp/>been<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaefe7609d91407014d94611912cc2b1a3" kindref="member">read</ref>(fd,<sp/>buffer,<sp/>16)<sp/>&lt;<sp/>0<sp/>){<sp/></highlight><highlight class="comment">//Return<sp/>after<sp/>all<sp/>bytes<sp/>have<sp/>been<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>read<sp/>or<sp/>write<sp/>the<sp/>SPI<sp/>in<sp/>full<sp/>duplex<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(fd,<sp/><ref refid="group___s_p_i_1ga889b7810c9c1f1bae770b150227fcd97" kindref="member">I_SPI_SETDUPLEX</ref>,<sp/>duplex_buffer)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>duplex<sp/>buffer<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;Full<sp/>Duplex<sp/>Test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gadd30ddeed4bdbf3c96fa36970c1ca778" kindref="member">write</ref>(fd,<sp/>buffer,<sp/>strlen(buffer)<sp/>&lt;<sp/>0<sp/>){<sp/></highlight><highlight class="comment">//returns<sp/>after<sp/>all<sp/>bytes<sp/>have<sp/>been<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaefe7609d91407014d94611912cc2b1a3" kindref="member">read</ref>(fd,<sp/>buffer,<sp/>16)<sp/>&lt;<sp/>0<sp/>){<sp/></highlight><highlight class="comment">//doesn&apos;t<sp/>return<sp/>until<sp/>16<sp/>bytes<sp/>arrive<sp/>(use<sp/>O_NONBLOCK<sp/>to<sp/>return<sp/>with<sp/>whatever<sp/>is<sp/>available)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>puts<sp/>the<sp/>SPI<sp/>back<sp/>in<sp/>half-duplex<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(fd,<sp/><ref refid="group___s_p_i_1ga889b7810c9c1f1bae770b150227fcd97" kindref="member">I_SPI_SETDUPLEX</ref>,<sp/>NULL)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>duplex<sp/>buffer<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaacad1d135ca2779b583623678e36db7c" kindref="member">close</ref>(fd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
