<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group___a_d_c" kind="group">
    <compoundname>ADC</compoundname>
    <title>Analog to Digital Converter (ADC)</title>
    <innerfile refid="adc_8h">adc.h</innerfile>
    <innerclass refid="structadc__attr__t" prot="public">adc_attr_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___a_d_c_1gadb1e7590af3d13eac9127942749eeb7e" prot="public" static="no">
        <type><ref refid="structhwpl__action__t" kindref="compound">hwpl_action_t</ref></type>
        <definition>typedef hwpl_action_t adc_action_t</definition>
        <argsstring></argsstring>
        <name>adc_action_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="78" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___a_d_c_1ga33301a686dfa6470fcd5ddae981e889f" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t adc_sample_t</definition>
        <argsstring></argsstring>
        <name>adc_sample_t</name>
        <briefdescription>
<para>This defines the type of an ADC sample (see adc_read() and adc_write()). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="102" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___a_d_c_1ga0752f98855786572ddddfdd5a467f8c8" prot="public" static="no">
        <name>ADC_IOC_IDENT_CHAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="76" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_1ga555a695bf58df062dc03f0e892d95cd7" prot="public" static="no">
        <name>ADC_MAX</name>
        <briefdescription>
<para>This defines the maximum value the ADC will return. It is specific to the MCU architecture. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="85" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_1gaf0098a1eafb8a60a1c65773e1064d595" prot="public" static="no">
        <name>ADC_MIN</name>
        <briefdescription>
<para>This defines the minimum step value of the ADC. This is MCU specific. For example if the data is not right-justified and the lowest 4 bits are always zero, ADC_MIN will be 0x10. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="94" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_1gaee9ff036d0e34f634b48e953d19d3bc2" prot="public" static="no">
        <name>ADC_MAX_FREQ</name>
        <briefdescription>
<para>This values defines the maximum frequency that can be used when reading the ADC. When doing an IOCTL write request, the freq member should not exceed this value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="113" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_1gae599932a5a540645042f364aa40335ae" prot="public" static="no">
        <name>I_ADC_GETATTR</name>
        <briefdescription>
<para>See below for details. </para>        </briefdescription>
        <detaileddescription>
<para>This requests reads the ADC attributes.</para><para>Example: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="adc_8h" kindref="compound">dev/adc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structadc__attr__t" kindref="compound">adc_attr_t</ref><sp/>attr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adc_fd;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">ioctl(adc_fd,<sp/><ref refid="group___a_d_c_1gae599932a5a540645042f364aa40335ae" kindref="member">I_ADC_GETATTR</ref>,<sp/>&amp;attr);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="140" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_1gaf9007b82aa0f9af53bbb74796462927e" prot="public" static="no">
        <name>I_ADC_SETATTR</name>
        <briefdescription>
<para>See below for details. </para>        </briefdescription>
        <detaileddescription>
<para>This requests writes the ADC attributes.</para><para>Example: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="adc_8h" kindref="compound">dev/adc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structadc__attr__t" kindref="compound">adc_attr_t</ref><sp/>attr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adc_fd;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">ioctl(adc_fd,<sp/><ref refid="group___a_d_c_1gaf9007b82aa0f9af53bbb74796462927e" kindref="member">I_ADC_SETATTR</ref>,<sp/>&amp;attr);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="155" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c_1ga75f23d9a4666337dc9d3308a0eadcc7d" prot="public" static="no">
        <name>I_ADC_SETACTION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" line="156" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/adc.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The ADC peripheral driver allows access to the MCU&apos;s built-in ADC. Each peripheral is opened using a unique port number and mode settings. Once open, any channel from the ADC can be read. Closing the peripheral will disable power to the ADC. More information about accessing peripheral IO is in the <ref refid="group___p_e_r_i_p_h_i_o" kindref="compound">Peripheral Input/Output</ref> section.</para><para>The following is an example of how to read the ADC in an OS environment:</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="adc_8h" kindref="compound">dev/adc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_adc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="group___a_d_c_1ga33301a686dfa6470fcd5ddae981e889f" kindref="member">adc_sample_t</ref><sp/>buffer[16];<sp/></highlight><highlight class="comment">//a<sp/>buffer<sp/>for<sp/>16<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structadc__attr__t" kindref="compound">adc_attr_t</ref><sp/>attr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fd<sp/>=<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gac843f2e35e60c3bbf1da47d84306f29b" kindref="member">open</ref>(</highlight><highlight class="stringliteral">&quot;/dev/adc0&quot;</highlight><highlight class="normal">,<sp/>O_RDWR);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fd<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>opening<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structadc__attr__t_1a52ac5ff57cb395121181220492703e18" kindref="member">enabled_channels</ref><sp/>=<sp/>(1&lt;&lt;5);<sp/></highlight><highlight class="comment">//enabled<sp/>channel<sp/>five</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structadc__attr__t_1a1b3d3fde33a659eaa407875721b2e80c" kindref="member">freq</ref><sp/>=<sp/><ref refid="group___a_d_c_1gaee9ff036d0e34f634b48e953d19d3bc2" kindref="member">ADC_MAX_FREQ</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structadc__attr__t_1ac57e591ff27636cd38c89b788a3d1a1a" kindref="member">pin_assign</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(fd,<sp/><ref refid="group___a_d_c_1gaf9007b82aa0f9af53bbb74796462927e" kindref="member">I_ADC_SETATTR</ref>,<sp/>&amp;ctl_adc)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>ADC<sp/>configuration<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>read<sp/>16<sp/>samples<sp/>of<sp/>the<sp/>ADC</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="group___u_n_i___f_i_l_d_e_s_1ga33a233f3e6cc9e1a2b8b3f6aaea2c808" kindref="member">lseek</ref>(fd,<sp/>5,<sp/>SEEK_SET);<sp/></highlight><highlight class="comment">//this<sp/>sets<sp/>the<sp/>channel<sp/>to<sp/>5<sp/>--<sp/>it&apos;s<sp/>a<sp/>&apos;c&apos;<sp/>device<sp/>so<sp/>it<sp/>doesn&apos;t<sp/>auto-increment</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaefe7609d91407014d94611912cc2b1a3" kindref="member">read</ref>(fd,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group___a_d_c_1ga33301a686dfa6470fcd5ddae981e889f" kindref="member">adc_sample_t</ref>)*16)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaacad1d135ca2779b583623678e36db7c" kindref="member">close</ref>(fd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
