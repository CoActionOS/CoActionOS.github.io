<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>CoActionOS</title>
    <detaileddescription>
<para><ref refid="group___c_a_o_s_1ga1c6d5de492ac61ad29aec7aa9a436bbf" kindref="member">VERSION</ref></para><sect1 id="index_1INTRO">
<title>Introduction</title>
<para>This is the CoActionOS API documentation. This is recommended for users looking to write device drivers or tweak the kernel. If you are writing applications, see the <ulink url="/redmine/projects/coactionos-applib/embedded/index.html">CoActionOS Applib API documentation</ulink>.</para><sect2 id="index_1API">
<title>POSIX API</title>
<para>CoActionOS supports a subset of the <ref refid="group___s_t_d_c" kindref="compound">C Standard Library</ref> and <ref refid="group___p_o_s_i_x" kindref="compound">POSIX</ref> APIs. Many programmers are already familiar with these APIs which eases the learning curve. Additionally, reference material for these standards is widely available on the web.</para><para><simplesect kind="see"><para><ref refid="group___s_t_d_c" kindref="compound">C Standard Library</ref>, <ref refid="group___p_o_s_i_x" kindref="compound">POSIX</ref></para></simplesect>
</para></sect2>
<sect2 id="index_1MULTI">
<title>Multi-tasking</title>
<para>CoActionOS supports both threads and processes. Threads are programmed using the <ref refid="group___p_t_h_r_e_a_d" kindref="compound">Posix Threads (pthread)</ref> API. Processes are unique because CoActionOS does not use a memory management unit (MMU). Instead, it uses a memory protection unit (MPU) to prevent one process from reading or writing data from another process despite both processes running in the same address space. Interprocess communication is accomplished with the <ref refid="group___s_e_m_a_p_h_o_r_e" kindref="compound">Semaphore</ref>, <ref refid="group___m_q_u_e_u_e" kindref="compound">Message Queue (mqueue)</ref>, and pthread APIs as well as with the filesystem (see <ref refid="group___s_y_s___f_i_f_o" kindref="compound">FIFO Buffer</ref>).</para></sect2>
<sect2 id="index_1FILESYSTEM">
<title>Filesystem</title>
<para>CoActionOS supports multiple filesystems. There are three required filesystems and one optional filesystem included in CoActionOS:<itemizedlist>
<listitem><para>Root Filesystem</para></listitem><listitem><para>Application Filesystem</para></listitem><listitem><para>Device Filesystem</para></listitem><listitem><para>Flash Filesystem (optional)</para></listitem></itemizedlist>
</para><para>Other filesystems (such as FAT) can also be added by the user.</para><para>Files on CoActionOS are accessed using the <ref refid="group___s_t_d_c" kindref="compound">C Standard Library</ref> or <ref refid="group___u_n_i_s_t_d" kindref="compound">Unix Standard (unistd)</ref> functions: <ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gac843f2e35e60c3bbf1da47d84306f29b" kindref="member">open()</ref>, <ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaefe7609d91407014d94611912cc2b1a3" kindref="member">read()</ref>, <ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gadd30ddeed4bdbf3c96fa36970c1ca778" kindref="member">write()</ref>, <ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaacad1d135ca2779b583623678e36db7c" kindref="member">close()</ref>, etc. The root filesystem is located at &quot;/&quot; and only supports the <ref refid="group___d_i_r_e_n_t" kindref="compound">Directory Entry (dirent)</ref> API. It is used for browsing the child filesystems.</para><para>The application filesystem manages data and code stored in the microcontroller&apos;s flash memory or RAM. By default, it is located at &quot;/app&quot; and includes the folders &quot;/app/flash&quot; and &quot;/app/ram&quot;. It is primarily used to install new programs but may also be used in a limited way for both temporary and non-volatile data storage.</para><para>The device filesystem comprises the hardware access API. It is located at &quot;/dev&quot; and allows access to both peripheral microcontroller hardware and external ICs. The folder, per se, is read-only; all available devices are fixed when the kernel is installed. The devices in the folder usually support reading as well as writing and are classified as either character special or block special files.</para><para>The flash filesystem (&quot;/home&quot;) is a fully-functional data-storage filesystem. It requires an external IC (such as a serial flash chip).</para></sect2>
</sect1>
<sect1 id="index_1DESIGN">
<title>Design</title>
<para>CoActionOS is divided into three layers (from the top down):<itemizedlist>
<listitem><para>OS Layer (scheduler, filesystem, etc)</para></listitem><listitem><para>Hardware Device Library (external and system device level abstraction)</para></listitem><listitem><para>Hardware Peripheral Library (MCU level abstraction)</para></listitem></itemizedlist>
</para><sect2 id="index_1OS_DESIGN">
<title>OS</title>
<para>The OS layer comprises the C standard library as well as a subset of the POSIX standard including the scheduler, threads, processes, and hardware abstraction.</para></sect2>
<sect2 id="index_1HWDL_DESIGN">
<title>Hardware Device Library (HWDL)</title>
<para>HWDL is the hardware device abstraction layer and includes drivers for a growing collection of ICs. These ICs interface with the microcontroller using any combination of peripherals (SPI, UART, I2C, etc) and GPIO pins. HWDL drivers make direct calls to the HWPL library functions.</para></sect2>
<sect2 id="index_1HWPL_DESIGN">
<title>Hardware Peripheral Library (HWPL)</title>
<para>The HWPL comprises all the drivers to access the on-chip micrcontroller features and peripherals including low-level task management. For example, this layer includes drivers for the on-chip UART and the on-chip clock control. It is the only layer that is dependent on the microcontroller.</para><sect3 id="index_1ARCHITECTURES">
<title>Architectures</title>
<para>HWPL currently supports:<itemizedlist>
<listitem><para>ARM Cortex M3 Core: CMSIS, Fault Handling, Memory Protection, SysTick, NVIC, Tasks including Context Switching</para></listitem><listitem><para>NXP LPC17xx: Cortex M3 Core, ADC, DAC (with DMA) Flash Memory, GPIO, USB Device, UART (with DMA), SPI (and SSP), I2C, Timers, RTC, PWM, QEI, WDT; support planned for: CAN; see <ref refid="group___l_p_c17_x_x_d_e_v" kindref="compound">LPC17xx Devices</ref>.</para></listitem><listitem><para>USB Link: USB Link technology is a desktop API for accessing MCU peripherals which currently supports peripheral IO operations on devices running CoActionOS; see <ref refid="group___u_s_b_l_i_n_k" kindref="compound">USB Link (link)</ref>. </para></listitem></itemizedlist>
</para></sect3>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
