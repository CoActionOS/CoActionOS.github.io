<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="pthread__kill_8c" kind="file">
    <compoundname>pthread_kill.c</compoundname>
    <includes refid="config_8h" local="yes">config.h</includes>
    <includes refid="hwpl_8h" local="yes">hwpl.h</includes>
    <includes local="yes">hwpl/task.h</includes>
    <includes local="yes">hwpl/debug.h</includes>
    <includes refid="caos_8h" local="yes">caos.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="yes">../sched/sched_flags.h</includes>
    <includes refid="sig__local_8h" local="yes">sig_local.h</includes>
    <incdepgraph>
      <node id="2319">
        <label>sys/stat.h</label>
      </node>
      <node id="2310">
        <label>stdbool.h</label>
      </node>
      <node id="2321">
        <label>ioctl.h</label>
        <link refid="ioctl_8h_source"/>
      </node>
      <node id="2306">
        <label>stdint.h</label>
      </node>
      <node id="2307">
        <label>stdlib.h</label>
      </node>
      <node id="2324">
        <label>errno.h</label>
      </node>
      <node id="2305">
        <label>hwpl.h</label>
        <link refid="hwpl_8h"/>
        <childnode refid="2306" relation="include">
        </childnode>
        <childnode refid="2307" relation="include">
        </childnode>
        <childnode refid="2308" relation="include">
        </childnode>
        <childnode refid="2309" relation="include">
        </childnode>
        <childnode refid="2310" relation="include">
        </childnode>
        <childnode refid="2311" relation="include">
        </childnode>
        <childnode refid="2312" relation="include">
        </childnode>
        <childnode refid="2313" relation="include">
        </childnode>
      </node>
      <node id="2314">
        <label>hwpl/task.h</label>
      </node>
      <node id="2322">
        <label>pthread.h</label>
      </node>
      <node id="2312">
        <label>hwpl/arch.h</label>
      </node>
      <node id="2308">
        <label>string.h</label>
      </node>
      <node id="2303">
        <label>/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c</label>
        <link refid="pthread_kill.c"/>
        <childnode refid="2304" relation="include">
        </childnode>
        <childnode refid="2305" relation="include">
        </childnode>
        <childnode refid="2314" relation="include">
        </childnode>
        <childnode refid="2315" relation="include">
        </childnode>
        <childnode refid="2316" relation="include">
        </childnode>
        <childnode refid="2322" relation="include">
        </childnode>
        <childnode refid="2323" relation="include">
        </childnode>
        <childnode refid="2324" relation="include">
        </childnode>
        <childnode refid="2325" relation="include">
        </childnode>
        <childnode refid="2326" relation="include">
        </childnode>
      </node>
      <node id="2325">
        <label>../sched/sched_flags.h</label>
      </node>
      <node id="2304">
        <label>config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="2323">
        <label>signal.h</label>
      </node>
      <node id="2317">
        <label>time.h</label>
      </node>
      <node id="2318">
        <label>device.h</label>
        <link refid="device_8h_source"/>
        <childnode refid="2319" relation="include">
        </childnode>
        <childnode refid="2310" relation="include">
        </childnode>
        <childnode refid="2313" relation="include">
        </childnode>
        <childnode refid="2312" relation="include">
        </childnode>
        <childnode refid="2320" relation="include">
        </childnode>
      </node>
      <node id="2327">
        <label>sys/reent.h</label>
      </node>
      <node id="2313">
        <label>hwpl/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="2306" relation="include">
        </childnode>
        <childnode refid="2310" relation="include">
        </childnode>
      </node>
      <node id="2311">
        <label>hwpl/fault.h</label>
      </node>
      <node id="2320">
        <label>dev/pio.h</label>
        <link refid="pio_8h"/>
        <childnode refid="2310" relation="include">
        </childnode>
        <childnode refid="2306" relation="include">
        </childnode>
        <childnode refid="2321" relation="include">
        </childnode>
        <childnode refid="2312" relation="include">
        </childnode>
      </node>
      <node id="2316">
        <label>caos.h</label>
        <link refid="caos_8h"/>
        <childnode refid="2309" relation="include">
        </childnode>
        <childnode refid="2308" relation="include">
        </childnode>
        <childnode refid="2307" relation="include">
        </childnode>
        <childnode refid="2317" relation="include">
        </childnode>
        <childnode refid="2305" relation="include">
        </childnode>
        <childnode refid="2318" relation="include">
        </childnode>
      </node>
      <node id="2309">
        <label>stdio.h</label>
      </node>
      <node id="2315">
        <label>hwpl/debug.h</label>
      </node>
      <node id="2326">
        <label>sig_local.h</label>
        <link refid="sig__local_8h_source"/>
        <childnode refid="2306" relation="include">
        </childnode>
        <childnode refid="2327" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___s_i_g_n_a_l_1ga3a99433c818622d4128170a26b0b9b1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int signal_priv_forward</definition>
        <argsstring>(int send_tid, int tid, int si_signo, int si_sigcode, int sig_value)</argsstring>
        <name>signal_priv_forward</name>
        <param>
          <type>int</type>
          <declname>send_tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>si_signo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>si_sigcode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sig_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" line="25" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="66" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group___s_i_g_n_a_l_1ga14ba21a6b40e6ab533221b0e50c50887" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void signal_forward_handler</definition>
        <argsstring>(int send_tid, int signo, int sigcode, int sigvalue)</argsstring>
        <name>signal_forward_handler</name>
        <param>
          <type>int</type>
          <declname>send_tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>signo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sigcode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sigvalue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" line="26" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group___s_i_g_n_a_l_1gad0437c4e7e4dd0b9779fab4c1de4a33d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void signal_priv_check_stack</definition>
        <argsstring>(void *args)</argsstring>
        <name>signal_priv_check_stack</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" line="29" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="29" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group___s_i_g_n_a_l_1ga4393cbea94379cda8f528b741b5d49c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int signal_callback</definition>
        <argsstring>(void *context, const void *data)</argsstring>
        <name>signal_callback</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function can be set as the callback for <ref refid="structhwpl__action__t" kindref="compound">hwpl_action_t</ref>. In this case, the context is pointing to a <ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref>. When the event happens, it will send a signal to the specified task.</para><para>If keep is non-zero, the signal will be sent each time the interrupt happens. Otherwise, the signal is just sent one time.</para><para>In the example below, the thread below will receive a SIGUSR1 the next time the external interrupt goes low. The run_on_sigusr1() will execute when the signal is received.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;applib/Eint.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run_on_sigusr1(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;got<sp/>sigusr1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Eint<sp/>intr(0);</highlight></codeline>
<codeline><highlight class="normal">intr.init();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group___s_i_g_n_a_l_1ga07e401f456a0156eba71562d79a76afa" kindref="member">signal</ref>(SIGUSR1,<sp/>(_sig_func_ptr)run_on_sigusr1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref><sp/>sig;<sp/></highlight><highlight class="comment">//this<sp/>must<sp/>be<sp/>valid<sp/>when<sp/>the<sp/>interrupt<sp/>happens</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">sig.tid<sp/>=<sp/><ref refid="group___p_t_h_r_e_a_d_1ga4c4f5f3b4f8f45d9d897847d53b11aaa" kindref="member">pthread_self</ref>();</highlight></codeline>
<codeline><highlight class="normal">sig.signo<sp/>=<sp/>SIGUSR1;</highlight></codeline>
<codeline><highlight class="normal">sig.keep<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">intr.setaction(0,<sp/><ref refid="group___e_i_n_t_1ggadd1257260f1ba401df43dd34fa2d28d5a91493ba0ea96049f046b9cfeebf42d81" kindref="member">EINT_ACTION_EVENT_FALLING</ref>,<sp/><ref refid="group___c_a_o_s_1ga4393cbea94379cda8f528b741b5d49c2" kindref="member">signal_callback</ref>,<sp/>&amp;sig);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" line="52" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="52" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="group___s_i_g_n_a_l_1ga8fd3dab8e187e6a92dbb44d5d678d234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int signal_priv_send</definition>
        <argsstring>(int send_tid, int tid, int si_signo, int si_sigcode, int sig_value, int forward)</argsstring>
        <name>signal_priv_send</name>
        <param>
          <type>int</type>
          <declname>send_tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>si_signo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>si_sigcode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sig_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>forward</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" line="103" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="103" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="group___s_i_g_n_a_l_1ga4617ca398544cad1d48237fbc401ae8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int signal_send</definition>
        <argsstring>(int tid, int si_signo, int si_sigcode, int sig_value)</argsstring>
        <name>signal_send</name>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>si_signo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>si_sigcode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sig_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" line="147" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="147" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="group___s_i_g_n_a_l_1ga401869937d4e310d70fafea2bd67149a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pthread_kill</definition>
        <argsstring>(pthread_t thread, int signo)</argsstring>
        <name>pthread_kill</name>
        <param>
          <type>pthread_t</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>int</type>
          <declname>signo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sends the signal <emphasis>signo</emphasis> to <emphasis>thread</emphasis>. The handler is executed in the context of <emphasis>thread</emphasis>, but the signal effects the entire process. For example, <programlisting><codeline><highlight class="normal"><ref refid="group___s_i_g_n_a_l_1ga401869937d4e310d70fafea2bd67149a" kindref="member">pthread_kill</ref>(8,<sp/>SIGKILL);</highlight></codeline>
</programlisting> will kill the process that holds thread 8. The exit handler will be executed on thread 8&apos;s stack.</para><para><simplesect kind="return"><para>Zero or -1 with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>signo</emphasis> is not a valid signal number</para></listitem><listitem><para>ESRCH: <emphasis>pid</emphasis> is not a valid process id </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" line="210" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group___s_i_g_n_a_l_1ga231e44700c4363c1b1b8d067a6634056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void signal_priv_activate</definition>
        <argsstring>(int *thread)</argsstring>
        <name>signal_priv_activate</name>
        <param>
          <type>int *</type>
          <declname>thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" line="214" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c" bodystart="214" bodyend="219"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>2011;<sp/>All<sp/>Rights<sp/>Reserved</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Please<sp/>see<sp/>http://www.coactionos.com/license.html<sp/>for</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>licensing<sp/>information.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="config_8h" kindref="compound">config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hwpl_8h" kindref="compound">hwpl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hwpl/task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hwpl/debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="caos_8h" kindref="compound">caos.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../sched/sched_flags.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sig_local.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hwpl/debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal_priv_forward(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>send_tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_signo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_sigcode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig_value);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>signal_forward_handler(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>send_tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigcode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigvalue);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//this<sp/>checks<sp/>to<sp/>see<sp/>if<sp/>sending<sp/>a<sp/>signal<sp/>will<sp/>cause<sp/>a<sp/>stack/heap<sp/>collision<sp/>in<sp/>the<sp/>target<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>signal_priv_check_stack(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>args){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>arg<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)args;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>*arg;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sp;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>to<sp/>see<sp/>if<sp/>stacking<sp/>an<sp/>interrupt<sp/>handler<sp/>will<sp/>cause<sp/>a<sp/>stack<sp/>heap<sp/>collision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tid<sp/>!=<sp/>task_get_current()<sp/>){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>the<sp/>target<sp/>stack<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>(uint32_t)task_table[tid].sp;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//read<sp/>the<sp/>current<sp/>stack<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_hwpl_core_priv_get_thread_stack_ptr(&amp;sp);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(sp<sp/>-<sp/>task_interrupt_stacksize()<sp/>-<sp/>(4*SCHED_DEFAULT_STACKGUARD_SIZE))<sp/>&lt;<sp/></highlight><highlight class="comment">//stackguard<sp/>*<sp/>4<sp/>gives<sp/>the<sp/>handler<sp/>a<sp/>little<sp/>bit<sp/>of<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)(task_table[tid].mem.stackguard.addr)<sp/>){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*arg<sp/>=<sp/>ret;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_i_g_n_a_l_1ga4393cbea94379cda8f528b741b5d49c2" kindref="member">signal_callback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>only<sp/>works<sp/>if<sp/>the<sp/>other<sp/>parts<sp/>of<sp/>the<sp/>interrupt<sp/>handler<sp/>have<sp/>not<sp/>modified<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref><sp/>*<sp/>args<sp/>=<sp/>(<ref refid="structsignal__callback__t" kindref="compound">signal_callback_t</ref>*)context;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>signal_priv_send(0,<sp/>args-&gt;tid,<sp/>args-&gt;si_signo,<sp/>args-&gt;si_sigcode,<sp/>args-&gt;sig_value,<sp/>1)<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//this<sp/>will<sp/>dis-regard<sp/>the<sp/>callback<sp/>so<sp/>additional<sp/>events<sp/>stop<sp/>sending<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args-&gt;keep;<sp/></highlight><highlight class="comment">//non-zero<sp/>return<sp/>means<sp/>to<sp/>leave<sp/>callback<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>signal_forward_handler(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>send_tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigcode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigvalue){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>is<sp/>called<sp/>in<sp/>a<sp/>non-privileged<sp/>context<sp/>on<sp/>task<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>signal_send(send_tid,<sp/>signo,<sp/>sigcode,<sp/>sigvalue);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal_priv_forward(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>send_tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_signo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_sigcode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig_value){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>task_interrupt_t<sp/>intr;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_stack;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>the<sp/>task<sp/>id<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(uint32_t)tid<sp/>&lt;<sp/>task_get_total()<sp/>){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>si_signo<sp/>!=<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>si_signo<sp/>&lt;<sp/>SCHED_NUM_SIGNALS<sp/>){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_stack<sp/>=<sp/>tid;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal_priv_check_stack(&amp;check_stack);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>check_stack<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.tid<sp/>=<sp/>tid;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.handler<sp/>=<sp/>(task_interrupt_handler_t)signal_forward_handler;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.sync_callback<sp/>=<sp/>(core_privcall_t)signal_priv_activate;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.sync_callback_arg<sp/>=<sp/>&amp;tid;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[0]<sp/>=<sp/>send_tid;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[1]<sp/>=<sp/>si_signo;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[2]<sp/>=<sp/>si_sigcode;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[3]<sp/>=<sp/>sig_value;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_priv_interrupt(&amp;intr);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal_priv_send(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>send_tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_signo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_sigcode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig_value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>forward){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>task_interrupt_t<sp/>intr;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_stack;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(tid<sp/>==<sp/>task_get_current())<sp/>&amp;&amp;<sp/>(forward<sp/>!=<sp/>0)<sp/>){</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>receiving<sp/>tid<sp/>is<sp/>currently<sp/>executing,<sp/>sending<sp/>the<sp/>signal<sp/>directly<sp/>will<sp/>corrupt<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//So<sp/>we<sp/>stack<sp/>a<sp/>signal<sp/>on<sp/>task<sp/>0<sp/>and<sp/>have<sp/>it<sp/>send<sp/>the<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>only<sp/>happens<sp/>when<sp/>priv<sp/>signals<sp/>are<sp/>sent<sp/>because<sp/>the<sp/>stack<sp/>is<sp/>in<sp/>an<sp/>unknown<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>signal_priv_forward(tid,<sp/>0,<sp/>si_signo,<sp/>si_sigcode,<sp/>sig_value);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>the<sp/>task<sp/>id<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(uint32_t)tid<sp/>&lt;<sp/>task_get_total()<sp/>){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>si_signo<sp/>!=<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>si_signo<sp/>&lt;<sp/>SCHED_NUM_SIGNALS<sp/>){</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_stack<sp/>=<sp/>tid;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal_priv_check_stack(&amp;check_stack);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>check_stack<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.tid<sp/>=<sp/>tid;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.handler<sp/>=<sp/>(task_interrupt_handler_t)signal_handler;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.sync_callback<sp/>=<sp/>(core_privcall_t)signal_priv_activate;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.sync_callback_arg<sp/>=<sp/>&amp;tid;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[0]<sp/>=<sp/>send_tid;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[1]<sp/>=<sp/>si_signo;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[2]<sp/>=<sp/>si_sigcode;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[3]<sp/>=<sp/>sig_value;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_priv_interrupt(&amp;intr);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal_send(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_signo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>si_sigcode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig_value){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>task_interrupt_t<sp/>intr;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pthread_mutex_t<sp/>*<sp/>delay_mutex;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_stack;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>the<sp/>task<sp/>id<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sched_check_tid(tid)<sp/>){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ESRCH;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>si_signo<sp/>!=<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay_mutex<sp/>=<sp/>sched_table[tid].signal_delay_mutex;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>for<sp/>the<sp/>signal<sp/>delay<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>delay_mutex<sp/>!=<sp/>NULL<sp/>){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>means<sp/>the<sp/>target<sp/>task<sp/>is<sp/>doing<sp/>critical<sp/>work<sp/>(like<sp/>modifying<sp/>the<sp/>filesystem)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___p_t_h_r_e_a_d___m_u_t_e_x_1ga12809c44718c21544ceb280dc1a53573" kindref="member">pthread_mutex_lock</ref>(delay_mutex)<sp/>==<sp/>0<sp/>){<sp/></highlight><highlight class="comment">//wait<sp/>until<sp/>the<sp/>task<sp/>releases<sp/>the<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___p_t_h_r_e_a_d___m_u_t_e_x_1ga96184290ffb60e04c53a52869cf960a2" kindref="member">pthread_mutex_unlock</ref>(delay_mutex);<sp/><sp/></highlight><highlight class="comment">//unlock<sp/>the<sp/>mutex<sp/>then<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>si_signo<sp/>&lt;<sp/>SCHED_NUM_SIGNALS<sp/>){</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_stack<sp/>=<sp/>tid;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hwpl_core_privcall(signal_priv_check_stack,<sp/>&amp;check_stack);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>check_stack<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.tid<sp/>=<sp/>tid;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.handler<sp/>=<sp/>(task_interrupt_handler_t)signal_handler;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.sync_callback<sp/>=<sp/>(core_privcall_t)signal_priv_activate;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.sync_callback_arg<sp/>=<sp/>&amp;tid;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[0]<sp/>=<sp/>task_get_current();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[1]<sp/>=<sp/>si_signo;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[2]<sp/>=<sp/>si_sigcode;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intr.arg[3]<sp/>=<sp/>sig_value;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_interrupt(&amp;intr);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_i_g_n_a_l_1ga401869937d4e310d70fafea2bd67149a" kindref="member">pthread_kill</ref>(pthread_t<sp/>thread,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signo){</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>signal_send(thread,<sp/>signo,<sp/>SI_USER,<sp/>0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>signal_priv_activate(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>thread){</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>*thread;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sched_priv_deassert_stopped(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sched_priv_assert_active(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>SCHED_UNBLOCK_SIGNAL);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sched_priv_update_on_wake(<sp/>sched_get_priority(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/signal/pthread_kill.c"/>
  </compounddef>
</doxygen>
