<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="semaphore_8h" kind="file">
    <compoundname>semaphore.h</compoundname>
    <includes local="no">sys/syslimits.h</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">limits.h</includes>
    <includedby refid="sem_8c" local="yes">/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c</includedby>
    <incdepgraph>
      <node id="1941">
        <label>/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h</label>
        <link refid="semaphore.h"/>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1943" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
      </node>
      <node id="1942">
        <label>sys/syslimits.h</label>
      </node>
      <node id="1945">
        <label>limits.h</label>
      </node>
      <node id="1944">
        <label>sys/types.h</label>
      </node>
      <node id="1943">
        <label>sys/time.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1946">
        <label>/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h</label>
        <link refid="semaphore.h"/>
        <childnode refid="1947" relation="include">
        </childnode>
      </node>
      <node id="1947">
        <label>/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c</label>
        <link refid="sem_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structsem__t" prot="public">sem_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="semaphore_8h_1a2ef55dcb46a51cb0f879f4c1724bdded" prot="public" static="no">
        <name>SEM_FAILED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="29" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="semaphore_8h_1a2961bb23950351c6b10976674c27ddaf" prot="public" static="no">
        <name>SEM_VALUE_MAX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="30" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga4e398fea1080fd7919e5c72ee94e2fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_close</definition>
        <argsstring>(sem_t *sem)</argsstring>
        <name>sem_close</name>
        <param>
          <type>sem_t *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function closes a semaphore. The semaphore must be deleted using <ref refid="group___s_e_m_a_p_h_o_r_e_1ga776256d1a473906f8b7490689bfcb75c" kindref="member">sem_unlink()</ref> in order to free the system resources associated with the semaphore.</para><para><simplesect kind="return"><para>Zero on success or SEM_FAILED with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: sem is NULL </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="32" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="254" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga6bc9a7dd941a9b5e319715b767af5682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_destroy</definition>
        <argsstring>(sem_t *sem)</argsstring>
        <name>sem_destroy</name>
        <param>
          <type>sem_t *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function destroys <emphasis>sem<ndash/>an</emphasis> unnamed semaphore.</para><para><simplesect kind="return"><para>Zero on success or -1 with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: sem is NULL </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="33" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="128" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga9755d3b56c40d2aec3d55b00c8f7cae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_getvalue</definition>
        <argsstring>(sem_t *sem, int *sval)</argsstring>
        <name>sem_getvalue</name>
        <param>
          <type>sem_t *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function gets the value of the semaphore. If the semaphore is locked, the value is zero.</para><para><simplesect kind="return"><para>Zero on success or -1 with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: sem is NULL </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="34" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="145" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga532509bd8a6499f8193253192fb83a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_init</definition>
        <argsstring>(sem_t *sem, int pshared, unsigned int value)</argsstring>
        <name>sem_init</name>
        <param>
          <type>sem_t *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pshared</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function initializes <emphasis>sem</emphasis> as an unnamed semaphore with <emphasis>pshared</emphasis> and <emphasis>value</emphasis>.</para><para><simplesect kind="return"><para>Zero on success or -1 with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: sem is NULL </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="35" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga6efb777ffb2b3641875a813a1b22912d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sem_t *</type>
        <definition>sem_t* sem_open</definition>
        <argsstring>(const char *name, int oflag,...)</argsstring>
        <name>sem_open</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>oflag</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function opens or creates a named semaphore.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the message queue </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oflag</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags to use when opening (O_CREAT, O_EXCL, O_RDWR)</para></parameterdescription>
</parameteritem>
</parameterlist>
When using O_CREAT, the third argument is the mode and the fourth is the initial value of the semaphore: <programlisting><codeline><highlight class="normal">sem_t<sp/>*<sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga6efb777ffb2b3641875a813a1b22912d" kindref="member">sem_open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oflag,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>Zero on success or SEM_FAILED with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>ENAMETOOLONG: name length is greater than NAME_MAX</para></listitem><listitem><para>EEXIST: O_CREAT and O_EXCL are set in <emphasis>oflag</emphasis> but the semaphore already exists</para></listitem><listitem><para>ENOENT: O_CREAT is not set in <emphasis>oflag</emphasis> and the semaphore does not exist</para></listitem><listitem><para>ENOMEM: not enough memory for the semaphore </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="36" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="172" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga015dce85cab8477c679cc47968958247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_post</definition>
        <argsstring>(sem_t *sem)</argsstring>
        <name>sem_post</name>
        <param>
          <type>sem_t *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function unlocks (increments) the value of the semaphore.</para><para><simplesect kind="return"><para>Zero on success or SEM_FAILED with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: sem is NULL</para></listitem><listitem><para>EACCES: process cannot access semaphore </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="37" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="289" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga19192f37769545c4c4661dc8d0b3daf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_timedwait</definition>
        <argsstring>(sem_t *sem, const struct timespec *timeout)</argsstring>
        <name>sem_timedwait</name>
        <param>
          <type>sem_t *</type>
          <declname>sem</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
          <defname>abs_timeout</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function waits to lock (decrement) the semaphore until the value of <emphasis>CLOCK_REALTIME</emphasis> exceeds the value of <emphasis>abs_timeout</emphasis>.</para><para><simplesect kind="return"><para>Zero on success or SEM_FAILED with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: sem is NULL</para></listitem><listitem><para>EACCES: process cannot access semaphore</para></listitem><listitem><para>ETIMEDOUT: timeout expired without locking the semaphore </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="38" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="329" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga4de7a9a334b01b6373b017aaefa07cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_trywait</definition>
        <argsstring>(sem_t *sem)</argsstring>
        <name>sem_trywait</name>
        <param>
          <type>sem_t *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function locks (decrements) the semaphore if it can be locked immediately.</para><para><simplesect kind="return"><para>Zero on success or -1 with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: sem is NULL</para></listitem><listitem><para>EACCES: process cannot access semaphore</para></listitem><listitem><para>EAGAIN: <emphasis>sem</emphasis> could not be immediately locked. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="39" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="374" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1ga776256d1a473906f8b7490689bfcb75c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_unlink</definition>
        <argsstring>(const char *name)</argsstring>
        <name>sem_unlink</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function unlinks a named semaphore. It also releases any system resources associated with the semaphore.</para><para><simplesect kind="return"><para>Zero on success or SEM_FAILED with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>ENOENT: the semaphore with <emphasis>name</emphasis> could not be found</para></listitem><listitem><para>ENAMETOOLONG: the length of <emphasis>name</emphasis> exceeds <emphasis>NAME_MAX</emphasis> </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="40" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="397" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="group___s_e_m_a_p_h_o_r_e_1gaad70020dca2241a2b78e272ca033271b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sem_wait</definition>
        <argsstring>(sem_t *sem)</argsstring>
        <name>sem_wait</name>
        <param>
          <type>sem_t *</type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function locks (decrements) the semaphore. If the semaphore is already zero (and therefore cannot be locked), the calling thread blocks until the semaphore becomes available.</para><para><simplesect kind="return"><para>Zero on success or SEM_FAILED with errno (see <ref refid="group___e_r_r_n_o" kindref="compound">Error Numbers</ref>) set to:<itemizedlist>
<listitem><para>EINVAL: <emphasis>sem</emphasis> is NULL</para></listitem><listitem><para>EACCES: <emphasis>sem</emphasis> is not pshared and was created in another process </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h" line="41" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/src/sys/semaphore/sem.c" bodystart="454" bodyend="461"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>2011;<sp/>All<sp/>Rights<sp/>Reserved</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Please<sp/>see<sp/>http://www.coactionos.com/license.html<sp/>for</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>licensing<sp/>information.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SEMAPHORE_H_</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SEMAPHORE_H_</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/syslimits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_initialized;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pshared;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pid_t<sp/>pid;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>references;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[NAME_MAX];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/>sem_t;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEM_FAILED<sp/>((void*)0)</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SEM_VALUE_MAX<sp/>INT_MAX</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga4e398fea1080fd7919e5c72ee94e2fc5" kindref="member">sem_close</ref>(sem_t<sp/>*sem);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga6bc9a7dd941a9b5e319715b767af5682" kindref="member">sem_destroy</ref>(sem_t<sp/>*sem);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga9755d3b56c40d2aec3d55b00c8f7cae8" kindref="member">sem_getvalue</ref>(sem_t<sp/>*sem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sval);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga532509bd8a6499f8193253192fb83a3d" kindref="member">sem_init</ref>(sem_t<sp/>*sem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pshared,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">sem_t<sp/>*<sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga6efb777ffb2b3641875a813a1b22912d" kindref="member">sem_open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oflag,<sp/>...);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga015dce85cab8477c679cc47968958247" kindref="member">sem_post</ref>(sem_t<sp/>*sem);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga19192f37769545c4c4661dc8d0b3daf9" kindref="member">sem_timedwait</ref>(sem_t<sp/>*<sp/>sem,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*<sp/>timeout);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga4de7a9a334b01b6373b017aaefa07cf0" kindref="member">sem_trywait</ref>(sem_t<sp/>*sem);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1ga776256d1a473906f8b7490689bfcb75c" kindref="member">sem_unlink</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group___s_e_m_a_p_h_o_r_e_1gaad70020dca2241a2b78e272ca033271b" kindref="member">sem_wait</ref>(sem_t<sp/>*sem);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SEMAPHORE_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/semaphore.h"/>
  </compounddef>
</doxygen>
