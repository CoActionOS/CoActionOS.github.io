<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="group___u_a_r_t" kind="group">
    <compoundname>UART</compoundname>
    <title>Universal Asynchronous Receiver/Transmitter (UART)</title>
    <innerfile refid="uart_8h">uart.h</innerfile>
    <innerclass refid="structuart__attr__t" prot="public">uart_attr_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___u_a_r_t_1ga6bcc37e31dd40c204b4ac6f6189e8878" prot="public" static="no">
        <name>uart_parity_t</name>
        <enumvalue id="group___u_a_r_t_1gga6bcc37e31dd40c204b4ac6f6189e8878aa80d2d8ea61454045ebe71d155e85b3d" prot="public">
          <name>UART_PARITY_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates no parity </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___u_a_r_t_1gga6bcc37e31dd40c204b4ac6f6189e8878ad90cc425f5ba447773a44a75be6593e2" prot="public">
          <name>UART_PARITY_ODD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates odd parity </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___u_a_r_t_1gga6bcc37e31dd40c204b4ac6f6189e8878ad908a637b1dd23f93b149dd2d8bdfdb8" prot="public">
          <name>UART_PARITY_EVEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates even parity </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This lists the valid values for UART parity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="89" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="enum" id="group___u_a_r_t_1ga80155586fa275b28773c9b203f52caba" prot="public" static="no">
        <name>@17</name>
        <enumvalue id="group___u_a_r_t_1gga80155586fa275b28773c9b203f52cabaa9cdf6533cdf2fa04d02403c12253884f" prot="public">
          <name>UART_ATTR_STOP_BITS_1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>One stop bit </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___u_a_r_t_1gga80155586fa275b28773c9b203f52cabaa4adb27df73696c5fe5cd0960367b04ea" prot="public">
          <name>UART_ATTR_STOP_BITS_2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Two stop bits </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___u_a_r_t_1gga80155586fa275b28773c9b203f52cabaa2230cced463779a586e0d310c6dd7131" prot="public">
          <name>UART_ATTR_STOP_BITS_0_5</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>0.5 stop bits </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___u_a_r_t_1gga80155586fa275b28773c9b203f52cabaaeb592c3e505aa00bee9bb3eeae0c1055" prot="public">
          <name>UART_ATTR_STOP_BITS_1_5</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1.5 stop bits </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="102" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group___u_a_r_t_1ga6b7b47dd702d9e331586d485013fd1ea" prot="public" static="no">
        <name>@18</name>
        <enumvalue id="group___u_a_r_t_1gga6b7b47dd702d9e331586d485013fd1eaac7c6ddcc663f8fac1ba66a679c598606" prot="public">
          <name>UART_EVENT_DATA_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data is ready to be read </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___u_a_r_t_1gga6b7b47dd702d9e331586d485013fd1eaa270f0fc3a099a5f7a4432a031943a627" prot="public">
          <name>UART_EVENT_WRITE_COMPLETE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A write has completed </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>details This list the available UART events when setting custom actions for the UART callbacks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="123" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="123" bodyend="126"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___u_a_r_t_1gacec7a23eb0d2e1ba1609bfb737c6f35a" prot="public" static="no">
        <type><ref refid="structhwpl__action__t" kindref="compound">hwpl_action_t</ref></type>
        <definition>typedef hwpl_action_t uart_action_t</definition>
        <argsstring></argsstring>
        <name>uart_action_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This defines a UART action. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="99" column="1" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___u_a_r_t_1ga03ff5accb1a37f6242573ebff9893589" prot="public" static="no">
        <name>UART_IOC_IDENT_CHAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="84" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1gab74f38c5c9dc38d60858196e03b70064" prot="public" static="no">
        <name>UART_ATTR_START_BITS_1</name>
        <briefdescription>
<para>This specifies one start bit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="113" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1gaf4157d28f4d2dda8c3d1d06b3c113016" prot="public" static="no">
        <name>UART_ATTR_START_BITS_2</name>
        <briefdescription>
<para>This specifies two start bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="118" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1ga9d4bf965f9a8be7593539fa30a3f43bb" prot="public" static="no">
        <name>I_UART_GETATTR</name>
        <briefdescription>
<para>This request gets the UART attributes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="146" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1ga2b70a7fe4a7e66651d66d45400c5a426" prot="public" static="no">
        <name>I_UART_SETATTR</name>
        <briefdescription>
<para>This request sets the UART attributes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="150" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1ga2b9606d0f378d521dea4021024da291b" prot="public" static="no">
        <name>I_UART_SETACTION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="151" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1gacdad9a7610a78f0dd2f7bde6b68756b1" prot="public" static="no">
        <name>I_UART_CLEAR</name>
        <briefdescription>
<para>This request clears the receive buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="155" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1ga21aadf48f1923d3d8e3f38e5c42c1c41" prot="public" static="no">
        <name>I_UART_GETBYTE</name>
        <briefdescription>
<para>See details below. </para>        </briefdescription>
        <detaileddescription>
<para>This gets a single byte from the UART. The request returns -1 if no bytes are available to get. Otherwise, 0 is returned and the character is written to the ctl argument. Example: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="uart_8h" kindref="compound">dev/uart.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(uart_fd,<sp/><ref refid="group___u_a_r_t_1ga21aadf48f1923d3d8e3f38e5c42c1c41" kindref="member">I_UART_GETBYTE</ref>,<sp/>&amp;c)<sp/>==<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//one<sp/>byte<sp/>from<sp/>the<sp/>UART<sp/>was<sp/>written<sp/>to<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="172" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1gaf833617db8bf5b3655839e7306ce3aca" prot="public" static="no">
        <name>I_UART_FLUSH</name>
        <briefdescription>
<para>See details below. </para>        </briefdescription>
        <detaileddescription>
<para>This flushes all incoming bytes from the buffer.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="uart_8h" kindref="compound">dev/uart.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(uart_fd,<sp/><ref refid="group___u_a_r_t_1gaf833617db8bf5b3655839e7306ce3aca" kindref="member">I_UART_FLUSH</ref>);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="183" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_a_r_t_1ga1df6872f9dc648d3ade0d2a76289f59a" prot="public" static="no">
        <name>I_UART_TOTAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" line="185" column="9" bodyfile="/Users/tgil/git/CoActionOS/CoActionOS/include/dev/uart.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The UART submodule uses interrupts to send and receive data on the UART port through a circular buffer. Once the receive buffer is full, incoming bytes are dropped. More information about accessing peripheral IO is in the <ref refid="group___p_e_r_i_p_h_i_o" kindref="compound">Peripheral Input/Output</ref> section.</para><para>The following is an example of how to read/write the UART in an OS environment:</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="uart_8h" kindref="compound">dev/uart.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_write_uart(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structuart__attr__t" kindref="compound">uart_attr_t</ref><sp/>attr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[16];</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>fd<sp/>=<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gac843f2e35e60c3bbf1da47d84306f29b" kindref="member">open</ref>(</highlight><highlight class="stringliteral">&quot;/dev/uart0&quot;</highlight><highlight class="normal">,<sp/>O_RDWR);<sp/></highlight><highlight class="comment">//Here<sp/>O_RDWR<sp/>could<sp/>be<sp/>OR&apos;d<sp/>with<sp/>O_NONBLOCK<sp/>for<sp/>non<sp/>blocking<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fd<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>opening<sp/>peripheral<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structuart__attr__t_1aa94e58584407d254bda954d37fd0ced3" kindref="member">baudrate</ref><sp/>=<sp/>9600;<sp/></highlight><highlight class="comment">//9600<sp/>Baudrate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structuart__attr__t_1a7a220446820d1cfc3287f903b4e50336" kindref="member">pin_assign</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//Use<sp/>GPIO<sp/>configuration<sp/>zero<sp/>(see<sp/>device<sp/>specific<sp/>documentation<sp/>for<sp/>details)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structuart__attr__t_1ab889f02ef7a8d761b9729feee9318450" kindref="member">parity</ref><sp/>=<sp/><ref refid="group___u_a_r_t_1gga6bcc37e31dd40c204b4ac6f6189e8878aa80d2d8ea61454045ebe71d155e85b3d" kindref="member">UART_PARITY_NONE</ref>;<sp/></highlight><highlight class="comment">//No<sp/>parity</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structuart__attr__t_1a98b23501cd1f3ea4f81ca002757b07a2" kindref="member">start</ref><sp/>=<sp/><ref refid="group___u_a_r_t_1gab74f38c5c9dc38d60858196e03b70064" kindref="member">UART_ATTR_START_BITS_1</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structuart__attr__t_1a8466176541ccb3d37308884f5672dca3" kindref="member">stop</ref><sp/>=<sp/><ref refid="group___u_a_r_t_1gga80155586fa275b28773c9b203f52cabaa9cdf6533cdf2fa04d02403c12253884f" kindref="member">UART_ATTR_STOP_BITS_1</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="structuart__attr__t_1a4bcff2760ca438cb9aac1844fd1efbd1" kindref="member">width</ref><sp/>=<sp/>8;<sp/></highlight><highlight class="comment">//8-bit<sp/>widths</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1ga1e7463f2ee53d9da5a2ee24121aed25d" kindref="member">ioctl</ref>(fd,<sp/>I_SETATTR,<sp/>&amp;attr)<sp/>&lt;<sp/>0<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>set<sp/>attr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now<sp/>read<sp/>or<sp/>write<sp/>the<sp/>UART</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>Test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gadd30ddeed4bdbf3c96fa36970c1ca778" kindref="member">write</ref>(fd,<sp/>buffer,<sp/>strlen(buffer)<sp/>&lt;<sp/>0<sp/>){<sp/></highlight><highlight class="comment">//returns<sp/>after<sp/>all<sp/>bytes<sp/>have<sp/>been<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>write<sp/>UART&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaefe7609d91407014d94611912cc2b1a3" kindref="member">read</ref>(fd,<sp/>buffer,<sp/>16)<sp/>&lt;<sp/>0<sp/>){<sp/></highlight><highlight class="comment">//doesn&apos;t<sp/>return<sp/>until<sp/>at<sp/>least<sp/>1<sp/>bytes<sp/>arrives<sp/>(use<sp/>O_NONBLOCK<sp/>to<sp/>return<sp/>with<sp/>whatever<sp/>is<sp/>available)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>read<sp/>UART&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="group___u_n_i___f_i_l_e___a_c_c_e_s_s_1gaacad1d135ca2779b583623678e36db7c" kindref="member">close</ref>(fd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
